
name: ci_build

trigger:
  batch: true
  branches:
    include:
    - main
    - TestBranch
  paths:
    include:
    - src/backend/*
# trigger:
# - $(Build.SourceBranchName)
# - source
# - testbranch


parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd

variables:
- group: arm-vg

stages:
- stage: Versioning
  displayName: 'Versioning Update Process'
  jobs:
  - job: GetFileChanges
    displayName: Getting Changed Files 
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent 
    steps:
    - checkout: self
    # - checkout: git://CloudPillar@CloudPillar$(Build.SourceBranch)
      persistCredentials: true
      clean: true
      # clean: false
    - task: Bash@3
      displayName: Get Changed Files
      inputs:
        targetType: inline
        script: |          
          git branch
          SourceBranch=$(Build.SourceBranchName)
          echo "Source Branch Name: $(Build.SourceBranchName)"
          git fetch origin
          git checkout $SourceBranch
          git pull --all
          

          # Print the list of changed files
          echo "${changed_files}"
          
          echo "Get the commit hash for the last merge commit"
          echo "================================================="
          last_merge_commit=$(git log --merges -n 1 --pretty=format:"%H")
          echo "last_merge_commit: $last_merge_commit"

          echo "Get the commit hash for the parent of the last merge commit"
          echo "================================================="
          parent_of_last_merge=$(git rev-parse "${last_merge_commit}^")
          echo "parent_of_last_merge: $parent_of_last_merge"


          echo "Get the list of files changed in the last merge commit"
          echo "================================================="
          changed_files=$(git diff --name-only "${parent_of_last_merge}" "${last_merge_commit}")
          echo "changed_files: $changed_files"



    # - task: PublishPipelineArtifact@1
    #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      

    # - task: Bash@3
    #   displayName: Get Changed Files
    #   inputs:
    #     targetType: inline
    #     script: |          

    #       SourceBranch=$(Build.SourceBranchName)
    #       echo "Source Branch Name: $(Build.SourceBranchName)"
    #       echo "Source Branch Name: $SourceBranch"


    #       echo "1"
    #       echo "============================"
    #       printf "$(Build.SourceVersion)~1 \n $(Build.SourceVersion)"
    #       git diff --name-only $(Build.SourceVersion)~1 $(Build.SourceVersion)
    #       echo "============================"

    #       echo "2"
    #       echo "============================"
    #       git diff HEAD~1
    #       echo "============================"


    #       printf "Tree:\n"
    #       # tree ./

    #       tree $(Build.SourcesDirectory)


    #       # Get the commit hash for the last merge commit
    #       last_merge_commit=$(git log --merges -n 1 --pretty=format:"%H")

    #       # Get the commit hash for the parent of the last merge commit
    #       parent_of_last_merge=$(git rev-parse "${last_merge_commit}^")

    #       # Get the list of files changed in the last merge commit
    #       changed_files=$(git diff --name-only "${parent_of_last_merge}" "${last_merge_commit}")

    #       # Print the list of changed files
    #       echo "${changed_files}"

          # CurrentBranch=$(git symbolic-ref --short HEAD)
          # CurrentBranch2=$(git branch | sed -n '1{s/^* *//;p}')
          # CurrentBranch3=$(git branch --show-current)
          # CurrentBranch=$(git rev-parse --abbrev-ref HEAD)
          # echo "Current Branch Name: $CurrentBranch"
          # echo "Current Branch Name2: $CurrentBranch2"
          # echo "Current Branch Name3: $CurrentBranch3"

          # git diff-tree --no-commit-id --name-only -r "$SourceBranch"
          # echo "12"
          # git diff-tree --no-commit-id --name-only -r $(Build.SourceBranchName)
          # echo "13"
          # git diff --name-only HEAD HEAD~1
          
          # echo "============================"
          # echo "============================"
          # echo "============================"

          # echo Differences1:
          # Diff1=$(git diff-tree --no-commit-id --name-only -r "$SourceBranch")
          # echo "Diff1:"
          # echo "$Diff1"

          # echo Differences2:
          # Diff2=$(git diff --name-only HEAD HEAD~1)
          # echo "Diff2"
          # echo "$Diff2"
          



          # git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion)
          # differences=$(git diff-tree --no-commit-id --name-only -r $CurrentBranch)
          # differences2=$(git diff-tree --no-commit-id --name-only -r $CurrentBranch2)
          # echo "Differences: $differences"
          # echo "Differences2: $differences2"















































