name: ci_build_t_9320
          # major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
          # minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt)
          # TIMESTAMP=$(date +%Y%m%d%H%M%S)
          # BuildNumber=$(git rev-list --count HEAD)

trigger:
# - none
- $(Build.SourceBranchName)
# - main

parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: blobstreamer
    values:
    # - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener
  - name: version
    displayName: Select Major & Minor Verson
    type: string
    default: 1.0
    values:
    - 1.0
    - 1.1
    - 2.1
variables:
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg
- name: TIMESTAMP
  value: $(date +%Y%m%d%H%M%S)
- name: BuildNumber
  value: $(git rev-list --count HEAD)
- name: MajorVersion
  value: 0
- name: MinorVersion
  value: 6




stages:
- stage: Test
  displayName: Test Stage
  jobs:
  - job: Test_J_1
    displayName: Test Job 1
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent 
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - bash: |
        # TIMESTAMP=$(date +%Y%m%d%H%M%S) && BuildNumber=$(git rev-list --count HEAD)
        # && sed -i "s/_BUILDNUM_/${BuildNumber}/g; s/_TIMESTAMP_/${TIMESTAMP}/g" src/backend/${{parameters.image}}/${{parameters.image}}.csproj
        # echo "BuildNumber: $(BuildNumber)"
        # TAG_SUFFIX=$(BuildNumber).$(TIMESTAMP)
        # TAG_PREFIX=$(MajorVersion).$(MinorVersion)
        # TAG_PREFIX=${{parameters.version}}
        # TAG=$TAG_PREFIX.$TAG_SUFFIX
        # echo "TAG: $TAG"
        
        major=1
        minor=0
        # major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
        # minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt)        
        echo "##vso[task.setvariable variable=major;]$major"          
        echo "##vso[task.setvariable variable=minor;]$minor"          
        echo "##vso[task.setvariable variable=MajorVersion;]1"
        echo "##vso[task.setvariable variable=MinorVersion;]0"
        # echo "##vso[task.setvariable variable=major;]$major" 
        # echo "##vso[task.setvariable variable=minor;]$minor"
        # echo "##vso[task.setvariable variable=MajorVersion;]$major"
        # echo "##vso[task.setvariable variable=MinorVersion;]$minor"

        # TIMESTAMP=$(date +%Y%m%d%H%M%S) && BuildNumber=$(git rev-list --count HEAD) && export TAG=${{parameters.version}}.${BuildNumber}.{TIMESTAMP} && echo TAG: $TAG
      name: SetVars
    - bash: |
        echo "$(major).$(minor)"
- stage: GetVersion
  displayName: Get Major & Minor Version
  jobs:
  - job: Upadte_Major_Minor_Version
    displayName: Get & Update Major Version
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent 
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - task: Bash@3
      displayName: Update Major & Minor Version
      inputs:
        targetType: inline
        script: |
          echo "##[section]Version File:
          cat src/backend/version.txt
          
          echo "##[section]Major Minor Version:
          #+TODO Un Comment Both Rows in the Actual Main Version Update
          # major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
          # minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt)

          #+TODO Remove or Comment Below Row
          major=1
          minor=0
          echo "major: $major"
          echo "minor: $minor"
          echo "$(major).$(minor)"
          echo "============================================"
          echo "============================================"









          OLD_TAG_PREFIX=${{parameters.version}}
          OLD_TAG_SUFFIX=$(BuildNumber).$(TIMESTAMP)
          OLD_TAG=$OLD_TAG_PREFIX.$OLD_TAG_SUFFIX
          echo "OLD_TAG: $OLD_TAG"

          





          
