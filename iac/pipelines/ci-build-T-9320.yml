name: ci_build_t_9320
          # major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
          # minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt)
          # TIMESTAMP=$(date +%Y%m%d%H%M%S)
          # BuildNumber=$(git rev-list --count HEAD)
# steps: 
# - ${{ each parameter in parameters }}:
#   - script: echo ${{ parameter.Key }} 
#   - script: echo ${{ parameter.Value }}
trigger:
# - none
- $(Build.SourceBranchName)
# - main
variables:
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg
- name: TIMESTAMP
  value: $(date +%Y%m%d%H%M%S)
- name: BuildNumber
  value: $(git rev-list --count HEAD)
- name: major
  value: 2  
  # value: $(grep -oP '^major=\K\d+' src/backend/version.txt)  
- name: minor
  value: 2
#   value: $(grep -oP '^minor=\K\d+' src/backend/version.txt)
- name: FullVersion
  value: $(major).$(minor).$(BuildNumber).$(TIMESTAMP)

parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: iotlistener
    values:
    # - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener
  - name: versionfix
    displayName: Select Major & Minor Verson
    type: string
    default: current # 1.0
    values:
    - current # 1.0
    - nextminor # 1.1
    - nextmajor #2.0

stages:
- stage: Create_Variables_Stage
  displayName: Update Major & Minor Version
  jobs:
  - job: Create_Variables_Job
    displayName: Update Variables
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent 
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - ${{ if eq(parameters.versionfix, 'current') }}:
      - bash: |
          # +TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
          major=1 #+TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
          minor=0 #+TODO minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt)
          buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
          FullVersion=$major.$minor.$buildnumber.$timestamp && echo "FullVersion: $FullVersion"
          echo "##vso[task.setvariable variable=major;isOutput=true]$major"
          echo "##vso[task.setvariable variable=minor;isOutput=true]$minor"
          echo "##vso[task.setvariable variable=version;isOutput=true]$FullVersion"
          
          #* Backup Script
          # echo "##vso[task.setvariable variable=major;isOutput=true]$(grep -oP '^major=\K\d+' src/backend/version.txt)"
          # echo "##vso[task.setvariable variable=minor;isOutput=true]$(grep -oP '^minor=\K\d+' src/backend/version.txt)"
          # echo "##vso[task.setvariable variable=version;isOutput=true]$major.$minor.$buildnumber.$timestamp
        name: SetVars

    - ${{ if eq(parameters.versionfix, 'nextminor') }}:
      - bash: |
          # +TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
          major=1 #+TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
          minor=1 #+TODO minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt + 1)
          buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
          FullVersion=$major.$minor.$buildnumber.$timestamp && echo "FullVersion: $FullVersion"
          echo "##vso[task.setvariable variable=major;isOutput=true]$major"
          echo "##vso[task.setvariable variable=minor;isOutput=true]$minor"
          echo "##vso[task.setvariable variable=version;isOutput=true]$FullVersion"
        name: SetVars

    - ${{ if eq(parameters.versionfix, 'nextmajor') }}:
      - bash: |
          # +TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
          major=2 #+TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt + 1)
          minor=0 #+TODO minor=0
          buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
          FullVersion=$major.$minor.$buildnumber.$timestamp && echo "FullVersion: $FullVersion"
          echo "##vso[task.setvariable variable=major;isOutput=true]$major"
          echo "##vso[task.setvariable variable=minor;isOutput=true]$minor"
          echo "##vso[task.setvariable variable=version;isOutput=true]$FullVersion"
        name: SetVars

# - stage: Update_Version_Step
  - job: Update_Version_Job
    displayName: Get and Update Version
    # variables:
    #   major: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]
    #   minor: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]
    #   FullVersion: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]  
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent 
      steps:
      - checkout: self
        persistCredentials: true
        clean: true
      - bash: |
          # major=$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]
          # minor=$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]
          # FullVersion=$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]
          # major="$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]"
          # minor="$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]"
          # minor="$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]"
          echo "major.minor: $(major).$(minor)"
          echo "FullVersion: $(FullVersion)"





# stages:
# - stage: Create_Variables_Stage
#   displayName: Update Major & Minor Version
#   jobs:
#   - job: Create_Variables_Job
#     displayName: Update Variables
#     pool:
#       name: $(AGENT_POOL)
#       agent.name: aks-${{parameters.env}}-agent 
#     steps:
#     - checkout: self
#       persistCredentials: true
#       clean: true
#     - ${{ if eq(parameters.versionfix, 'current') }}:
#       - bash: |
#           # +TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
#           major=1 #+TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
#           minor=0 #+TODO minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt)
#           buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
#           FullVersion=$major.$minor.$buildnumber.$timestamp && echo "FullVersion: $FullVersion"
#           echo "##vso[task.setvariable variable=major;isOutput=true]$major"
#           echo "##vso[task.setvariable variable=minor;isOutput=true]$minor"
#           echo "##vso[task.setvariable variable=version;isOutput=true]$FullVersion"
          
#           #* Backup Script
#           # echo "##vso[task.setvariable variable=major;isOutput=true]$(grep -oP '^major=\K\d+' src/backend/version.txt)"
#           # echo "##vso[task.setvariable variable=minor;isOutput=true]$(grep -oP '^minor=\K\d+' src/backend/version.txt)"
#           # echo "##vso[task.setvariable variable=version;isOutput=true]$major.$minor.$buildnumber.$timestamp
#         name: SetVars

#     - ${{ if eq(parameters.versionfix, 'nextminor') }}:
#       - bash: |
#           # +TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
#           major=1 #+TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt)
#           minor=1 #+TODO minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt + 1)
#           buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
#           FullVersion=$major.$minor.$buildnumber.$timestamp && echo "FullVersion: $FullVersion"
#           echo "##vso[task.setvariable variable=major;isOutput=true]$major"
#           echo "##vso[task.setvariable variable=minor;isOutput=true]$minor"
#           echo "##vso[task.setvariable variable=version;isOutput=true]$FullVersion"
#         name: SetVars

#     - ${{ if eq(parameters.versionfix, 'nextmajor') }}:
#       - bash: |
#           # +TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
#           major=2 #+TODO major=$(grep -oP '^major=\K\d+' src/backend/version.txt + 1)
#           minor=0 #+TODO minor=0
#           buildnumber=$(BuildNumber) && timestamp=$(TIMESTAMP)
#           FullVersion=$major.$minor.$buildnumber.$timestamp && echo "FullVersion: $FullVersion"
#           echo "##vso[task.setvariable variable=major;isOutput=true]$major"
#           echo "##vso[task.setvariable variable=minor;isOutput=true]$minor"
#           echo "##vso[task.setvariable variable=version;isOutput=true]$FullVersion"
#         name: SetVars

# - stage: Update_Version_Step
#   jobs:
#   - job: Update_Version_Job
#     displayName: Get and Update Version
#     # variables:
#     #   major: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]
#     #   minor: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]
#     #   FullVersion: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]  
#     pool:
#       name: $(AGENT_POOL)
#       agent.name: aks-${{parameters.env}}-agent 
#       steps:
#       - checkout: self
#         persistCredentials: true
#         clean: true
#       - bash: |
#           # major=$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]
#           # minor=$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]
#           # FullVersion=$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]
#           # major="$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]"
#           # minor="$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]"
#           # minor="$[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]"
#           # echo "major.minor: $(major).$(minor)"
#           # echo "FullVersion: $(FullVersion)"
        # FullVersion=$(major).$(minor).$(BuildNumber).$(TIMESTAMP)


#   - job: Compare_Major_Minor_Version
#     variables:
#       major: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]]
#       minor: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]]
#     displayName: Compare Major Minor Version
#     pool:
#       name: $(AGENT_POOL)
#       agent.name: aks-${{parameters.env}}-agent 
#     steps:
#     - checkout: self
#       persistCredentials: true
#       clean: true
#     - bash: |
#       # echo equal = $($(major).$(minor)==$(parameters.versionfix))
#       # echo "##vso[task.setvariable variable=equal;isOutput=true]$equal"
#       echo $($(major).$(minor)
#       echo $(parameters.versionfix))
#       echo $($(major).$(minor)==$(parameters.versionfix))
  


#   - job: Upadte_Major_Minor_Version
#     variables:
#       major: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.major']]
#       minor: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.minor']]
#       FullVersion: $[stageDependencies.create_variables_stage.create_variables_job.outputs['ADO_variables.FullVersion']]
#     displayName: Get & Update Version
#     pool:
#       name: $(AGENT_POOL)
#       agent.name: aks-${{parameters.env}}-agent 
#     steps:
#     - checkout: self
#       persistCredentials: true
#       clean: true
#     - bash: |
#         echo "major.minor: $(major).$(minor)"
#         FullVersion=$(major).$(minor).$(BuildNumber).$(TIMESTAMP)
#         echo "FullVersion: $FullVersion"
#       name: MajorMinor          
#     - ${{ each parameter in parameters }}:
#       - script: echo ${{ parameter.Key }} 
#       - script: echo ${{ parameter.Value }}




          
