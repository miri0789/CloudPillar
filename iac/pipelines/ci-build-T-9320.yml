name: ci_build_t_9320_2
trigger:
- $(Build.SourceBranchName)

# * Parameters
parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: iotlistener
    values:
    # - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener  
  - name: versionString
    displayName: Select Major & Minor Verson
    type: string
    default: current # 1.0
    values:
    - current # 1.0
    - nextMinor # 1.1
    - nextMajor #2.0


variables:
# * Variables Groups
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

# * Variables

# * Dynamic Variables
- name: TIMESTAMP
  value: $(date +%Y%m%d%H%M%S)
- name: BuildNumber
  value: $(git rev-list --count HEAD)

# * Clean Variables



stages:
- stage: CI_Build
  displayName: CI Build Process

  jobs:
  - job: Set_Current Version
    displayName: Set Current Version ID
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - bash: |
        # Major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && Minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && version=$Major.$Minor && buildNumber=$(BuildNumber) && timestamp=$(TIMESTAMP) && fullVersion=$version.$buildnumber.$timestamp
        Major=1 && Minor=0 && version=$Major.$Minor && buildNumber=$(BuildNumber) && timestamp=$(TIMESTAMP) && fullVersion=$version.$buildNumber.$timestamp

        echo "##vso[task.setvariable variable=Major;isoutput=true]$Major"
        echo "##vso[task.setvariable variable=Minor;isoutput=true]$Minor"
        echo "##vso[task.setvariable variable=version;isoutput=true]$version"
        echo "##vso[task.setvariable variable=fullVersion;isoutput=true]$fullVersion"
        
        echo "##[section]Current Version Section"
        echo "##[group]Get Current Version Group"
        
        echo "Major: $Major"
        echo "Minor: $Minor"
        echo buildNumber: $buildNumber
        
        echo "version: $version"
        echo "fullVersion: $fullVersion"

        echo "##[endgroup]Get Current Version Finished"
      name: SetCurrentVersion
  

  - job: Update_Current_Version
    displayName: Update Version ID
    dependsOn: Set_Current Version    

    variables:
      currentMajor: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ]
      currentMinor: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Minor'] ]
      currentversion: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.version'] ]
      currentFullVersion: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.fullVersion'] ]

      - name: newMajor
        ${{ if eq(parameters.chosenVersionString, 'nextMajor') }}:          
          value: $( $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ] + 1)
        ${{ if ne (parameters.chosenVersionString, 'nextMajor') }}:
          value: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ]
      - name: newMinor
        ${{ if eq(parameters.chosenVersionString, 'nextMinor') }}:          
          value: $( $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Minor'] ] + 1)
        ${{ if ne (parameters.chosenVersionString, 'nextMinor') }}:
          value: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Minor'] ]
      
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - bash: |
        echo "##[group]Current Group"
        echo "Current Major: $(currentMajor)"
        echo "Current Minor: $(currentMinor)"
        echo "Current Version: $(currentVersion)"
        echo "Current Full Version: $(currentFullVersion)"
        echo "##[endgroup]Current Group Finished"


        echo "##[group]New Group"
        buildNumber=$(BuildNumber) && timestamp=$(TIMESTAMP) && newVersion=$newMajor.$newMinor && newFullVersion=$newMajor.$newMinor.$buildNumber.$timestamp
        echo "New Major: $(newMajor)"
        echo "New Minor: $(newMinor)"
        echo "New Version: $newVersion)
        echo "New Full Version: $newFullVersion"
        # echo "New Version: $(newVersion)"
        # echo "New Full Version: $(newFullVersion)"
        echo "##[endgroup]New Group Finished"

      name: UpdateCurrentVersion
