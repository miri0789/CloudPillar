name: ci_build_t_9320_2
trigger:
- $(Build.SourceBranchName)

# * Parameters
parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: iotlistener
    values:
    # - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener  
  - name: versionString
    displayName: Select Major & Minor Verson
    type: string
    default: current # 1.0
    values:
    - current # 1.0
    - nextMinor # 1.1
    - nextMajor #2.0


variables:
# * Variables Groups
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

# * Variables

# * Dynamic Variables
- name: TIMESTAMP
  value: $(date +%Y%m%d%H%M%S)
- name: BuildNumber
  value: $(git rev-list --count HEAD)

# * Clean Variables



stages:
- stage: CI_Build
  displayName: CI Build Process

  jobs:
  - job: SetCurrentVersion
    displayName: Set Current Version ID
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - bash: |
        # Major=$(grep -oP '^major=\K\d+' src/backend/version.txt) && Minor=$(grep -oP '^minor=\K\d+' src/backend/version.txt) && Version=$Major.$Minor && buildNumber=$(BuildNumber) && timestamp=$(TIMESTAMP) && FullVersion=$Version.$buildnumber.$timestamp
        Major=1 && Minor=0 && version=$Major.$Minor && buildNumber=$(BuildNumber) && timestamp=$(TIMESTAMP) && fullVersion=$version.$buildNumber.$timestamp

        echo "##vso[task.setvariable variable=Major;isoutput=true]$Major"
        echo "##vso[task.setvariable variable=Minor;isoutput=true]$Minor"
        echo "##vso[task.setvariable variable=Version;isoutput=true]$Version"
        echo "##vso[task.setvariable variable=FullVersion;isoutput=true]$FullVersion"
        
        echo "##[section]Current Version Section"
        echo "##[group]Get Current Version Group"
        
        echo "Major: $Major"
        echo "Minor: $Minor"
        echo buildNumber: $buildNumber
        
        echo "Version: $Version"
        echo "FullVersion: $FullVersion"

        echo "##[endgroup]Get Current Version Finished"
      name: BashSetCurrentVersion

  - job: UpdateCurrentVersion
    displayName: Update Version ID
    dependsOn: ['SetCurrentVersion']
    variables:              
      Major: ${{ dependencies.SetCurrentVersion.outputs['SetCurrentVersion.Major'] }}
      Minor: ${{ dependencies.SetCurrentVersion.outputs['SetCurrentVersion.Minor'] }}
      Version: ${{ dependencies.SetCurrentVersion.outputs['SetCurrentVersion.Version'] }}
      FullVersion: ${{ dependencies.SetCurrentVersion.outputs['SetCurrentVersion.FullVersion'] }}
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - bash: |
        echo "Major $(Major)"
        echo "Minor $(Minor)"
        # echo "${{ parameters.versionString }}"
        # echo "##[group]Current Group"
        # echo "Current Major: $(Major)"
        # echo "Current Minor: $(Minor)"
        # echo "Current Version: $(Version)"
        # echo "Current Full Version: $(FullVersion)"
        # echo "##[endgroup]Current Group Finished"
      name: UpdateCurrentVersion

#         ${{ if eq(parameters.versionString, 'nextMajor') }}:
#           value: $( $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ] + 1 )
#         ${{ if ne(parameters.versionString, 'nextMajor') }}:
#           value: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ]

#         ${{ if eq(parameters.versionString, 'nextMinor') }}:
        
#         ${{ if ne(parameters.versionString, 'nextMinor') }}:
#           value: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Minor'] ]

#       # - name: version
#       #   value: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.version'] ]
#       # - name: fullVersion
#       #   value: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.fullVersion'] ]

      
#     #     Major: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ]
#     #     Minor: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Minor'] ]
#     #     version: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.version'] ]
#     #     FullVersion: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.fullVersion'] ]
  
#     #   ${{ if eq(parameters.versionString, 'nextMinor') }}:              
#     #     Major: $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Major'] ]
#     #     Minor: $( $[ dependencies.Set_Current_Version.outputs['SetCurrentVersion.Minor'] ] + 1 )

      
#     # steps:
#     # - checkout: self
#     #   persistCredentials: true
#     #   clean: true
#     # - bash: |
#     #     echo "##[group]Current Group"
#     #     echo "Current Major: $(currentMajor)"
#     #     echo "Current Minor: $(currentMinor)"
#     #     echo "Current Version: $(currentVersion)"
#     #     echo "Current Full Version: $(currentFullVersion)"
#     #     echo "##[endgroup]Current Group Finished"


#     #     echo "##[group]New Group"
#     #     buildNumber=$(BuildNumber) && timestamp=$(TIMESTAMP) && newVersion=$newMajor.$newMinor && newFullVersion=$newMajor.$newMinor.$buildNumber.$timestamp
#     #     echo "New Major: $(newMajor)"
#     #     echo "New Minor: $(newMinor)"
#     #     echo "New Version: $newVersion)
#     #     echo "New Full Version: $newFullVersion"
#     #     # echo "New Version: $(newVersion)"
#     #     # echo "New Full Version: $(newFullVersion)"
#     #     echo "##[endgroup]New Group Finished"

#     #   name: UpdateCurrentVersion
