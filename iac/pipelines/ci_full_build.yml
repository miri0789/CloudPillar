
name: ci_full_test_$(Rev:r)

trigger:
  batch: true
  branches:
    include:
    - main
    - $(Build.SourceBranchName)
    exclude:
    - '*'


variables:
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

- name: major
  value: $(grep -oP '^major=\K\d+' src/backend/version.txt)
- name: minor
  value: $(grep -oP '^minor=\K\d+' src/backend/version.txt)
- name: TIME
  value: $(date +%Y%m%d%H%M%S)
- name: GitBuildNumber
  value: $(git rev-list --count HEAD)
- name: registryName
  value: 'iotimageacr'
# - name: dockerfilePath
#   value: './src/edge/conquest/Dockerfile'
- name: pipelineAcrConnection
  value: 'iotacr'
- name: isSelectedImageAll
  value: ${{ eq(parameters.image, 'all') }}


resources:
- repo: self

parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd    
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: all
    values:
    - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener    
    - edge_conquest



stages:
- ${{ if eq(parameters.image, 'all') }}:
  - ${{ each img in parameters.images }}:
    - stage: ProcessImage_${{ img.name }}
      displayName: Retrieve ${{ img.name }} Information
      variables:
      - name: imageVersion
        value: $(major).$(minor).$(GitBuildNumber).$(TIME)
      jobs:
      - template: templates/images-template.yml
        parameters:
          registryName: $(registryName)
          pipelineAcrConnection: $(pipelineAcrConnection)
          selectedImage: ${{ img.name }}
          imageVersion: $(imageVersion)
    - stage: CleanBuildScanPush
      displayName: Build Tag Scan Push Image
      dependsOn: 
      - ProcessImage_${{ img.name }}  
      variables:
      - name: imageName
        value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imageName'] ]
      - name: imageVersion
        value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imageVersion'] ]
      - name: imagePath
        value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imagePath'] ]
      - name: dockerFilePath
        value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.dockerFilePath'] ]      
      jobs:
      - job: CleanImages
        displayName: Clean Images & Containers
        pool:
          name: $(AGENT_POOL)
          agent.name: aks-${{parameters.env}}-agent
        steps:
        - template: templates/clean.yml              

      - job: BuildImageJob  
        displayName: Build ${{img.name}} Image
        dependsOn:
        - CleanImages
        pool:
          name: $(AGENT_POOL)
          agent.name: aks-${{parameters.env}}-agent
        steps:
        - script: |
            echo "Debugging BuildImage variables:"
            echo "imageName: $(imageName)"
            echo "imageVersion: $(imageVersion)"
          name: DebugPrint
        - template: templates/build.yml
          parameters:
            imageName: $(imageName)
            imageVersion: $(imageVersion)
            imagePath: $(imagePath)
            dockerFilePath: $(dockerFilePath)
            registryName: $(registryName)
            pipelineAcrConnection: $(pipelineAcrConnection)
      - job: ScanImageJob
        dependsOn: BuildImageJob 
        displayName: Scan ${{img.name}} Image 
        pool:
          name: $(AGENT_POOL)
          agent.name: aks-${{parameters.env}}-agent
        # variables:
        # - name: imageName
        #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
        # - name: imageVersion
        #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
        # - name: imagePath
        #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
        # - name: dockerFilePath
        #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
        steps:
        - script: |
            echo "Debugging BuildImage variables:"
            echo "imageName: $(imageName)"
            echo "imageVersion: $(imageVersion)"    
          name: DebugPrint
        - template: templates/scan.yml
          parameters:
            imageName: $(imageName)
            imageVersion: $(imageVersion)
            registryName: $(registryName)

      - job: PushImageJob  
        displayName: Push ${{img.name}} Image 
        dependsOn: ScanImageJob
        pool:
          name: $(AGENT_POOL)
          agent.name: aks-${{parameters.env}}-agent
        steps:
        - script: |
            echo "Debugging BuildImage variables:"
            echo "imageName: $(imageName)"
            echo "imageVersion: $(imageVersion)"    
          name: DebugPrint    
        - template: templates/push.yml
          parameters:
            imageName: $(imageName)
            imageVersion: $(imageVersion)
            registryName: $(registryName)

- ${{ if ne(parameters.image, 'all') }}:
  - stage: ProcessSingleImage_${{ parameters.image }}
    displayName: Retrieve _${{ parameters.image }} Information
    variables:
    - name: imageVersion
      value: $(major).$(minor).$(GitBuildNumber).$(TIME)
    jobs:
    - template: templates/images-template.yml
      parameters:
        registryName: $(registryName)
        pipelineAcrConnection: $(pipelineAcrConnection)
        selectedImage: ${{ parameters.image }}
        imageVersion: $(imageVersion)
  - stage: CleanBuildScanPush
    displayName: Build Tag Scan Push Image
    dependsOn: 
    - ProcessSingleImage_${{ parameters.image }}  
    variables:
    - name: imageName
      value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveInfo_${{ parameters.image }}.outputs['setImageInfo.imageName'] ]
    - name: imageVersion
      value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveInfo_${{ parameters.image }}.outputs['setImageInfo.imageVersion'] ]
    - name: imagePath
      value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveInfo_${{ parameters.image }}.outputs['setImageInfo.imagePath'] ]
    - name: dockerFilePath
      value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveInfo_${{ parameters.image }}.outputs['setImageInfo.dockerFilePath'] ]      
    jobs:
    - job: CleanImages
      displayName: Clean Images & Containers
      pool:
        name: $(AGENT_POOL)
        agent.name: aks-${{parameters.env}}-agent
      steps:
      - template: templates/clean.yml              

    - job: BuildImageJob  
      displayName: Build ${{parameters.image}} Image
      dependsOn:
      - CleanImages
      pool:
        name: $(AGENT_POOL)
        agent.name: aks-${{parameters.env}}-agent
      steps:
      - script: |
          echo "Debugging BuildImage variables:"
          echo "imageName: $(imageName)"
          echo "imageVersion: $(imageVersion)"
        name: DebugPrint
      - template: templates/build.yml
        parameters:
          imageName: $(imageName)
          imageVersion: $(imageVersion)
          imagePath: $(imagePath)
          dockerFilePath: $(dockerFilePath)
          registryName: $(registryName)
          pipelineAcrConnection: $(pipelineAcrConnection)
    - job: ScanImageJob
      dependsOn: BuildImageJob 
      displayName: Scan ${{parameters.image}} Image 
      pool:
        name: $(AGENT_POOL)
        agent.name: aks-${{parameters.env}}-agent
      # variables:
      # - name: imageName
      #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
      # - name: imageVersion
      #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
      # - name: imagePath
      #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
      # - name: dockerFilePath
      #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
      steps:
      - script: |
          echo "Debugging BuildImage variables:"
          echo "imageName: $(imageName)"
          echo "imageVersion: $(imageVersion)"    
        name: DebugPrint
      - template: templates/scan.yml
        parameters:
          imageName: $(imageName)
          imageVersion: $(imageVersion)
          registryName: $(registryName)

    - job: PushImageJob  
      displayName: Push ${{parameters.image}} Image 
      dependsOn: ScanImageJob
      pool:
        name: $(AGENT_POOL)
        agent.name: aks-${{parameters.env}}-agent
      steps:
      - script: |
          echo "Debugging BuildImage variables:"
          echo "imageName: $(imageName)"
          echo "imageVersion: $(imageVersion)"    
        name: DebugPrint    
      - template: templates/push.yml
        parameters:
          imageName: $(imageName)
          imageVersion: $(imageVersion)
          registryName: $(registryName)





























- stage: BuildScanPush
  displayName: Build Tag Scan Push Image
  condition: eq(variables.isSelectedImageAll, true)
  dependsOn: 
  - RetrieveImageInfo  
  jobs:
  - job: CleanImages
    displayName: Clean Images & Containers
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    steps:
    - template: templates/clean.yml              

  - job: BuildImageJob  
    displayName: Build ${{parameters.image}} Image
    dependsOn:
    - CleanImages
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    variables:
    - name: imageName
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
    - name: imageVersion
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
    - name: imagePath
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
    - name: dockerFilePath
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
    steps:
    - script: |
        echo "Debugging BuildImage variables:"
        echo "imageName: $(imageName)"
        echo "imageVersion: $(imageVersion)"
      name: DebugPrint
    - template: templates/build.yml
      parameters:
        imageName: $(imageName)
        imageVersion: $(imageVersion)
        imagePath: $(imagePath)
        dockerFilePath: $(dockerFilePath)
        registryName: $(registryName)
        pipelineAcrConnection: $(pipelineAcrConnection)
  - job: ScanImageJob
    dependsOn: BuildImageJob 
    displayName: Scan ${{parameters.image}} Image 
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    variables:
    - name: imageName
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
    - name: imageVersion
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
    - name: imagePath
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
    - name: dockerFilePath
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
    steps:
    - script: |
        echo "Debugging BuildImage variables:"
        echo "imageName: $(imageName)"
        echo "imageVersion: $(imageVersion)"    
      name: DebugPrint
    - template: templates/scan.yml
      parameters:
        imageName: $(imageName)
        imageVersion: $(imageVersion)
        registryName: $(registryName)

  - job: PushImageJob  
    displayName: Push ${{parameters.image}} Image 
    dependsOn: ScanImageJob
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    variables:
    - name: imageName
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
    - name: imageVersion
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
    - name: imagePath
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
    - name: dockerFilePath
      value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
    steps:
    - script: |
        echo "Debugging BuildImage variables:"
        echo "imageName: $(imageName)"
        echo "imageVersion: $(imageVersion)"    
      name: DebugPrint    
    - template: templates/push.yml
      parameters:
        imageName: $(imageName)
        imageVersion: $(imageVersion)
        registryName: $(registryName)

