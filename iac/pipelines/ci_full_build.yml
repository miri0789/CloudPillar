
name: ci_full_test_$(Rev:r)

trigger:
  batch: true
  branches:
    include:
    - main
    - $(Build.SourceBranchName)
    exclude:
    - '*'
  paths:
    include:
    - src/edge/conquest/*
    - src/backned/*
    exclude:
    - '*'    

resources:
- repo: self

variables:
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

- name: major
  value: $(grep -oP '^major=\K\d+' src/backend/version.txt)
- name: minor
  value: $(grep -oP '^minor=\K\d+' src/backend/version.txt)
- name: TIME
  value: $(date +%Y%m%d%H%M%S)
- name: GitBuildNumber
  value: $(git rev-list --count HEAD)
- name: registryName
  value: 'iotimageacr'
# - name: dockerfilePath
#   value: './src/edge/conquest/Dockerfile'
- name: pipelineAcrConnection
  value: 'iotacr'
  # value: 'iotimageacr'
- name: isSelectedImageAll
  value: ${{ eq(parameters.image, 'all') }}
- name: selectedImage
  value: ${{ parameters.image }}




parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd    
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: all
    values:
    - beapi
    - edge_conquest
    - iotlistener
    - all
    - analyzer
    - blobstreamer
    - keyholder
    - mongowriter
    - twinlistener    

stages:
  - stage: GetImages
    jobs:
    - job: GetImagesJob
      displayName: Get Images Job
      steps:
      - task: Bash@3
        name: getImagesInfo
        inputs:
          targetType: 'inline'
          script: |
            images=$(cat ./src/backend/images.json | base64 -w 0)
            echo "##vso[task.setvariable variable=images;isOutput=true]$images"
            echo "##vso[task.setvariable variable=images]$images"
        displayName: Set Images as Variable
  
  - stage: GetSingleImage
    dependsOn: GetImages
    condition: ne('${{ parameters.image }}', 'all')  
    jobs:
    - job: GetSingleImageJob
      variables:
        images: $[ stageDependencies.GetImages.GetImagesJob.outputs['getImagesInfo.images'] ]
      steps:
      - script: |
          imagesBase64='${{ variables.images }}'
          imagesJson=$(echo "$imagesBase64" | base64 --decode) # Base64 decode
          echo "Images JSON"
          echo "$imagesJson"
          for imgName in $(echo "${imagesJson}" | jq -r '.[].name'); do
            if [ "$imgName" == "${{ parameters.image }}" ]; then
              imageVersion=$(echo "${imagesJson}" | jq -r --arg imgName "$imgName" '.[] | select(.name == $imgName) | .imageVersion')
              if [ "$imgName" != "edge_conquest" ]; then
                imageVersion="$(major).$(minor).$(GitBuildNumber).$(TIME)"
              fi
              echo "Processing image: $imgName"
              echo "Image Version: $imageVersion"
              # Further processing logic here
            fi
          done
        name: SingleImage









        #   semi_images=$(cat ./src/backend/images.json)
        #   json=$(cat src/backend/images.json)
        #   images='${{ variables.images }}'
        #   echo "images"
        #   echo "$images"
        #   imagesJson=$(echo "$images" | jq '.')
        #   echo "Images JSON"
        #   echo $imagesJson
        #   for row in $(echo "${imagesJson}" | jq -r '.[] | @base64'); do
        #     _jq() {
        #       echo ${row} | base64 --decode | jq -r ${1}
        #     }
        #     imgName=$(_jq '.name')
        #     if [ "$imgName" == "${{ parameters.image }}" ]; then
        #       imageVersion=$(_jq '.imageVersion')
        #       if [ "$imgName" != "edge_conquest" ]; then
        #         imageVersion="$(major).$(minor).$(GitBuildNumber).$(TIME)"
        #       fi
        #       echo "Processing image: $imgName"
        #       echo "Image Version: $imageVersion"
        #       # Further processing logic here
        #     fi
        #   done
        # displayName: Get Single Image Info

    #   - task: Bash@3
    #     name: getSingleImagesInfo
    #     inputs:
    #       targetType: 'inline'
    #       script: |
    # - ${{ if eq(parameters.selectedImage, img.name) }}:            
    #     displayName: Set Images as Variable
  

# - stage: ProcessAllImages
#   dependsOn: GetImages
#   variables:
#   - name: images
#     value: $[ stageDependencies.GetImages.GetImagesJob.outputs['getImagesInfo.images'] ]
#   jobs:
#   - job: ProcessImagesJob
#     steps:
#     - ${{ each img in variables['images'] }}:
#       - script: |
#           if [ "${{ img.name }}" == "edge_conquest" ]; then
#             imageVersion=${{ img.imageVersion }}
#           else
#             imageVersion=$(major).$(minor).$(GitBuildNumber).$(TIME)
#           fi
#           # Your processing logic here using $imageVersion, ${{ img.imageName }}, etc.
#         displayName: Process Image ${{ img.name }}







    # variables:
    # - name: images
    #   value: $[ stageDependencies.GetImages.GetImagesJob.outputs['getImagesInfo.images'] ]      
    
    # - ${{ each img in variables['images'] }}:
    #   jobs:
    #   - job: ProcessImagesJob
    #     steps:
    #     - ${{ each img in variables['images'] }}:
    #       - ${{ if eq(img.name, 'edge_conquest') }}:
    #         - script: echo "Using existing imageVersion for edge_conquest ${{img.imageVersion}}"
    #       - ${{ if (img.name, 'edge_conquest') }}:


#         - stage: ProcessImage_${{ parameters.image }}
#           displayName: Retrieve ${{ parameters.image }} Information
#           variables:
#           - name: imageVersion
#             value: $(major).$(minor).$(GitBuildNumber).$(TIME)
#           jobs:
#           - template: templates/images-template.yml
#             parameters:
#               registryName: $(registryName)
#               pipelineAcrConnection: $(pipelineAcrConnection)
#               selectedImage: ${{ img.name }}
#               imageVersion: $(imageVersion)
#         - stage: CleanBuildScanPush
#           displayName: Build Tag Scan Push Image
#           dependsOn: 
#           - ProcessImage_${{ img.name }}  
#           variables:
#           - name: imageName
#             value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imageName'] ]
#           - name: imageVersion
#             value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imageVersion'] ]
#           - name: imagePath
#             value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imagePath'] ]
#           - name: dockerFilePath
#             value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.dockerFilePath'] ]      
#           jobs:
#           - job: CleanImages
#             displayName: Clean Images & Containers
#             pool:
#               name: $(AGENT_POOL)
#               agent.name: aks-${{parameters.env}}-agent
#             steps:
#             - template: templates/clean.yml              

#           - job: BuildImageJob  
#             displayName: Build ${{img.name}} Image
#             dependsOn:
#             - CleanImages
#             pool:
#               name: $(AGENT_POOL)
#               agent.name: aks-${{parameters.env}}-agent
#             steps:
#             - script: |
#                 echo "##[group]BuildImageVars"
#                 echo "##[command]imageName:\t $(imageName)"
#                 echo "##[command]imageVersion:\t $(imageVersion)"
#                 echo "##[warning]imageVersion:\t $(imageVersion)"
#                 echo "##[warning]imageName:\t $(imageName)"
#                 echo "##[endgroup]"        
#               #   echo "Debugging BuildImage variables:"
#               #   echo "imageName: $(imageName)"
#               #   echo "imageVersion: $(imageVersion)"
#               name: DebugPrint
#             - template: templates/build.yml
#               parameters:
#                 imageName: $(imageName)
#                 imageVersion: $(imageVersion)
#                 imagePath: $(imagePath)
#                 dockerFilePath: $(dockerFilePath)
#                 registryName: $(registryName)
#                 pipelineAcrConnection: $(pipelineAcrConnection)
# - ${{ if ne(parameters.image, 'all') }}:
#   - ${{ each img in variables['images'] }}:
#     - ${{ if eq(parameters.image, img.name) }}:
#     - stage: ProcessSingleImage_${{ parameters.image }}
#       displayName: Retrieve ${{ parameters.image }} Information
#       variables:
#       - name: imageVersion
#         value: $(major).$(minor).$(GitBuildNumber).$(TIME)
#       jobs:
#     - template: templates/images-template.yml
#       parameters:
#         registryName: $(registryName)
#         pipelineAcrConnection: $(pipelineAcrConnection)
#         selectedImage: ${{ parameters.image }}
#         imageVersion: $(imageVersion)
#   - stage: CleanBuildScanPush
#     displayName: Build Tag Scan Push Image
#     dependsOn: 
#     - ProcessSingleImage_${{ parameters.image }}  
#     variables:
#     - name: imageName
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
#     - name: imageVersion
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
#     - name: imagePath
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
#     - name: dockerFilePath
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]      
#     jobs:
#     - job: CleanImages
#       displayName: Clean Images & Containers
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       steps:
#       - template: templates/clean.yml              

#     - job: BuildImageJob  
#       displayName: Build ${{parameters.image}} Image
#       dependsOn:
#       - CleanImages
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       steps:
#       - script: |
#           echo "##[group]BuildImageVars"
#           echo "##[command]imageName:\t $(imageName)"
#           echo "##[command]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageName:\t $(imageName)"
#           echo "##[endgroup]"        
#         name: DebugPrint
#       - template: templates/build.yml
#         parameters:
#           imageName: $(imageName)
#           imageVersion: $(imageVersion)
#           imagePath: $(imagePath)
#           dockerFilePath: $(dockerFilePath)
#           registryName: $(registryName)
#           pipelineAcrConnection: "$(pipelineAcrConnection)"
#     - job: ScanImageJob
#       dependsOn: BuildImageJob 
#       displayName: Scan ${{parameters.image}} Image 
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       # variables:
#       # - name: imageName
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
#       # - name: imageVersion
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
#       # - name: imagePath
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
#       # - name: dockerFilePath
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
#       steps:
#       - script: |
#           echo "##[group]ScanImageVars"
#           echo "##[command]imageName:\t $(imageName)"
#           echo "##[command]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageName:\t $(imageName)"
#           echo "##[endgroup]"            
#         name: DebugPrint
#       - template: templates/scan.yml
#         parameters:
#           imageName: $(imageName)
#           imageVersion: $(imageVersion)
#           registryName: $(registryName)

#     - job: PushImageJob  
#       displayName: Push ${{parameters.image}} Image 
#       dependsOn: ScanImageJob
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       steps:
#       - script: |
#           echo "##[group]PushImageVars"
#           echo "##[command]imageName:\t $(imageName)"
#           echo "##[command]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageName:\t $(imageName)"
#             echo "##[endgroup]"        
#         name: DebugPrint    
#       - template: templates/push.yml
#         parameters:
#           imageName: $(imageName)
#           imageVersion: $(imageVersion)
#           registryName: $(registryName)







# stages:
# - ${{ if eq(parameters.image, 'all') }}:
#   - ${{ each img in parameters.images }}:
#     - stage: ProcessImage_${{ parameters.image }}
#       displayName: Retrieve ${{ parameters.image }} Information
#       variables:
#       - name: imageVersion
#         value: $(major).$(minor).$(GitBuildNumber).$(TIME)
#       jobs:
#       - template: templates/images-template.yml
#         parameters:
#           registryName: $(registryName)
#           pipelineAcrConnection: $(pipelineAcrConnection)
#           selectedImage: ${{ img.name }}
#           imageVersion: $(imageVersion)
#     - stage: CleanBuildScanPush
#       displayName: Build Tag Scan Push Image
#       dependsOn: 
#       - ProcessImage_${{ img.name }}  
#       variables:
#       - name: imageName
#         value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imageName'] ]
#       - name: imageVersion
#         value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imageVersion'] ]
#       - name: imagePath
#         value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.imagePath'] ]
#       - name: dockerFilePath
#         value: $[ stageDependencies.ProcessImage_${{ img.name }}.RetrieveInfo_${{ img.name }}.outputs['setImageInfo.dockerFilePath'] ]      
#       jobs:
#       - job: CleanImages
#         displayName: Clean Images & Containers
#         pool:
#           name: $(AGENT_POOL)
#           agent.name: aks-${{parameters.env}}-agent
#         steps:
#         - template: templates/clean.yml              

#       - job: BuildImageJob  
#         displayName: Build ${{img.name}} Image
#         dependsOn:
#         - CleanImages
#         pool:
#           name: $(AGENT_POOL)
#           agent.name: aks-${{parameters.env}}-agent
#         steps:
#         - script: |
#             echo "##[group]BuildImageVars"
#             echo "##[command]imageName:\t $(imageName)"
#             echo "##[command]imageVersion:\t $(imageVersion)"
#             echo "##[warning]imageVersion:\t $(imageVersion)"
#             echo "##[warning]imageName:\t $(imageName)"
#             echo "##[endgroup]"        
#           #   echo "Debugging BuildImage variables:"
#           #   echo "imageName: $(imageName)"
#           #   echo "imageVersion: $(imageVersion)"
#           name: DebugPrint
#         - template: templates/build.yml
#           parameters:
#             imageName: $(imageName)
#             imageVersion: $(imageVersion)
#             imagePath: $(imagePath)
#             dockerFilePath: $(dockerFilePath)
#             registryName: $(registryName)
#             pipelineAcrConnection: $(pipelineAcrConnection)
#       - job: ScanImageJob
#         dependsOn: BuildImageJob 
#         displayName: Scan ${{img.name}} Image 
#         pool:
#           name: $(AGENT_POOL)
#           agent.name: aks-${{parameters.env}}-agent
#         # variables:
#         # - name: imageName
#         #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
#         # - name: imageVersion
#         #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
#         # - name: imagePath
#         #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
#         # - name: dockerFilePath
#         #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
#         steps:
#         - script: |
#             echo "##[group]ScanImageVars"
#             echo "##[command]imageName:\t $(imageName)"
#             echo "##[command]imageVersion:\t $(imageVersion)"
#             echo "##[warning]imageVersion:\t $(imageVersion)"
#             echo "##[warning]imageName:\t $(imageName)"
#             echo "##[endgroup]"            
#           name: DebugPrint
#         - template: templates/scan.yml
#           parameters:
#             imageName: $(imageName)
#             imageVersion: $(imageVersion)
#             registryName: $(registryName)

#       - job: PushImageJob  
#         displayName: Push ${{img.name}} Image 
#         dependsOn: ScanImageJob
#         pool:
#           name: $(AGENT_POOL)
#           agent.name: aks-${{parameters.env}}-agent
#         steps:
#         - script: |
#             echo "##[group]PushImageVars"
#             echo "##[command]imageName:\t $(imageName)"
#             echo "##[command]imageVersion:\t $(imageVersion)"
#             echo "##[warning]imageVersion:\t $(imageVersion)"
#             echo "##[warning]imageName:\t $(imageName)"
#             echo "##[endgroup]"            
#           name: DebugPrint    
#         - template: templates/push.yml
#           parameters:
#             imageName: $(imageName)
#             imageVersion: $(imageVersion)
#             registryName: $(registryName)

# - ${{ if ne(parameters.image, 'all') }}:
#   - stage: ProcessSingleImage_${{ parameters.image }}
#     displayName: Retrieve ${{ parameters.image }} Information
#     variables:
#     - name: imageVersion
#       value: $(major).$(minor).$(GitBuildNumber).$(TIME)
#     jobs:
#     - template: templates/images-template.yml
#       parameters:
#         registryName: $(registryName)
#         pipelineAcrConnection: $(pipelineAcrConnection)
#         selectedImage: ${{ parameters.image }}
#         imageVersion: $(imageVersion)
#   - stage: CleanBuildScanPush
#     displayName: Build Tag Scan Push Image
#     dependsOn: 
#     - ProcessSingleImage_${{ parameters.image }}  
#     variables:
#     - name: imageName
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
#     - name: imageVersion
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
#     - name: imagePath
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
#     - name: dockerFilePath
#       value: $[ stageDependencies.ProcessSingleImage_${{ parameters.image }}.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]      
#     jobs:
#     - job: CleanImages
#       displayName: Clean Images & Containers
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       steps:
#       - template: templates/clean.yml              

#     - job: BuildImageJob  
#       displayName: Build ${{parameters.image}} Image
#       dependsOn:
#       - CleanImages
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       steps:
#       - script: |
#           echo "##[group]BuildImageVars"
#           echo "##[command]imageName:\t $(imageName)"
#           echo "##[command]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageName:\t $(imageName)"
#           echo "##[endgroup]"        
#         name: DebugPrint
#       - template: templates/build.yml
#         parameters:
#           imageName: $(imageName)
#           imageVersion: $(imageVersion)
#           imagePath: $(imagePath)
#           dockerFilePath: $(dockerFilePath)
#           registryName: $(registryName)
#           pipelineAcrConnection: "$(pipelineAcrConnection)"
#     - job: ScanImageJob
#       dependsOn: BuildImageJob 
#       displayName: Scan ${{parameters.image}} Image 
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       # variables:
#       # - name: imageName
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageName'] ]
#       # - name: imageVersion
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imageVersion'] ]
#       # - name: imagePath
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.imagePath'] ]
#       # - name: dockerFilePath
#       #   value: $[ stageDependencies.RetrieveImageInfo.RetrieveImageInfoJob.outputs['setImageInfo.dockerFilePath'] ]
#       steps:
#       - script: |
#           echo "##[group]ScanImageVars"
#           echo "##[command]imageName:\t $(imageName)"
#           echo "##[command]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageName:\t $(imageName)"
#           echo "##[endgroup]"            
#         name: DebugPrint
#       - template: templates/scan.yml
#         parameters:
#           imageName: $(imageName)
#           imageVersion: $(imageVersion)
#           registryName: $(registryName)

#     - job: PushImageJob  
#       displayName: Push ${{parameters.image}} Image 
#       dependsOn: ScanImageJob
#       pool:
#         name: $(AGENT_POOL)
#         agent.name: aks-${{parameters.env}}-agent
#       steps:
#       - script: |
#           echo "##[group]PushImageVars"
#           echo "##[command]imageName:\t $(imageName)"
#           echo "##[command]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageVersion:\t $(imageVersion)"
#           echo "##[warning]imageName:\t $(imageName)"
#             echo "##[endgroup]"        
#         name: DebugPrint    
#       - template: templates/push.yml
#         parameters:
#           imageName: $(imageName)
#           imageVersion: $(imageVersion)
#           registryName: $(registryName)







# stages:
# - stage: RetrieveImages
#   condition: eq(parameters.image, 'all') # Only run this stage if "all" is selected
#   jobs:
#   - job: GetImages
#     displayName: Get All Images
#     steps:
#     - template: templates/get-images.yml
#       parameters:
#         registryName: $(registryName)
#         pipelineAcrConnection: $(pipelineAcrConnection)


# - stage: ProcessImages
#   jobs:
#   - template: templates/images-template.yml
#     parameters:
#       registryName: $(registryName)
#       pipelineAcrConnection: $(pipelineAcrConnection)
#       selectedImage: ${{ parameters.image }} # 'all' or specific image name
#       imageVersion: $(imageVersion)
