# File: templates/clean_build_scan_push.yml
parameters:
  imageName: ''
  imageVersion: ''
  imagePath: ''
  dockerFilePath: ''
  registryName: ''  
  pipelineAcrConnection: ''

  

steps:
- task: Bash@3
    displayName: 'Clean Images'
    inputs:
    targetType: inline
    script: |
        docker stop $(docker ps -a -q) --force
        docker rm $(docker ps -a -q) --force    
        docker image prune -a --force

        echo "Containers: "
        docker ps -a
        echo -e "\n\n"
        echo "Images: "
        docker image ls

- task: Bash@3
    displayName: 'Build & Tag ${{ parameters.imageName }}'
    name: buildImage      
    condition: and(ne('${{ parameters.imageName }}', 'all'), ne('${{ parameters.imageName }}', 'edge_conquest'))
    inputs:
        targetType: inline
        script: |
        az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
        az account set --subscription $(ARM_SUBSCRIPTION_ID)
        echo "Azure Login Successfull"
        az acr login -n $(ACR_NAME)
        echo "registryName: ${{ parameters.registryName }}"
        echo "imageName: ${{ parameters.imageName }}"
        echo "imageVersion: ${{ parameters.imageVersion }}"
        echo "dockerFilePath: ${{ parameters.dockerFilePath }}"
        echo "imagePath: ${{ parameters.imagePath }}"
        echo "registryName: $(registryName)"
        echo "imageName: $(imageName)"
        echo "imageVersion: $(imageVersion)"
        echo "dockerFilePath: $(dockerFilePath)"
        echo "imagePath: $(imagePath)"
        echo "${{ parameters.registryName }}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}} --build-arg DLL=${{parameters.imageName}}.dll -f ${{parameters.dockerFilePath}} ${{parameters.imagePath}}"
        
        echo -e "\n\n"
        echo -e "================================================\n\tBase Info Version\n================================================"
        find ${{parameters.imagePath}} -name "*.csproj" -print0 | xargs -0 grep -H "InformationalVersion" | awk -F':' '{n=split($1,a,"/"); printf "%s:%s\n", a[n], $2}'
        
        # echo -e "\n\n"
        # echo -e "================================================\n\tInit Tag\n================================================"
        # INIT_TAG="_MAJOR_._MINOR_._BUILDNUM_._TIMESTAMP_"
        # echo "INIT TAG = $INIT_TAG"
        # find ${{parameters.imagePath}} -name "*.csproj" -print0 | xargs -0 grep -H "InformationalVersion" | awk -F':' '{n=split($1,a,"/"); printf "%s:%s\n", a[n], $2}'

        # find ${{parameters.imagePath}} -name "*.csproj" -exec sed -i "s/1.0._BUILDNUM_._TIMESTAMP_/${INIT_TAG}/g" {} \;

        echo -e "\n\n"
        echo -e "================================================\n\tUpdated Tag\n================================================"
        # sed -i "s/_BUILDNUM_/${BuildNumber}/g; s/_TIMESTAMP_/${TIMESTAMP}/g" ${{parameters.imagePath}}/*.csproj
        TAG="${{parameters.imageVersion}}"
        echo "TAG: $TAG"
        find ${{parameters.imagePath}} -name "*.csproj" -exec sed -i "s/1.0._BUILDNUM_._TIMESTAMP_/${TAG}/g" {} \; 
        find ${{parameters.imagePath}} -name "*.csproj" -print0 | xargs -0 grep -H "InformationalVersion" | awk -F':' '{n=split($1,a,"/"); printf "%s:%s\n", a[n], $2}'


        # cat ${{parameters.imagePath}}/*.csproj | grep "Info"
        # docker build -t ${{ parameters.registryName }}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}} --build-arg DLL=${{parameters.imageName}}.dll --label "version=${{parameters.imageVersion}}" --label "name=${{parameters.imageName}}" -f ${{parameters.dockerFilePath}} ${{parameters.imagePath}}
        docker build -t ${{parameters.registryName}}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}} -f ${{parameters.dockerFilePath}} ${{parameters.imagePath}}
        docker images | grep ${{parameters.imageName}}      


- task: Docker@2
    displayName: 'Dcoker Build & Tag ${{ parameters.imageName }}'
    name: dockerBuildImage     
    condition: eq('${{ parameters.imageName }}', 'edge_conquest') 
    inputs:
        command: 'build'
        repository: '${{ parameters.registryName }}.azurecr.io/${{ parameters.imageName }}'
        dockerfile: '${{ parameters.dockerFilePath }}'
        containerRegistry: '${{ parameters.pipelineAcrConnection }}'
        tags: '${{ parameters.imageVersion }}'



- task: Bash@3
  # displayName: Scan Image
  displayName: 'Scan ${{ parameters.imageName }}'
  condition: ne('${{ parameters.imageName }}', 'all') 
  inputs:
    targetType: inline
    script: |
      echo "Scan: ${{parameters.registryName}}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}}"
      echo "Image"
      docker image ls | grep ${{parameters.imageName}}
      echo "${{parameters.registryName}}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}}"
      docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL ${{parameters.registryName}}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}}
    name: scanImage

- task: Bash@3
  displayName: 'Push ${{ parameters.imageName }}'
  dependOn: 
  condition: ne('${{ parameters.imageName }}', 'all') 
  inputs:
    targetType: inline
    script: |
      az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
      az account set --subscription $(ARM_SUBSCRIPTION_ID)
      echo "Azure Login Successfull"
      sudo az acr login -n $(ACR_NAME)
      # sed -i "s/_BUILDNUM_/${BuildNumber}/g; s/_TIMESTAMP_/${TIMESTAMP}/g" src/backend/${{parameters.imageName}}/${{parameters.imageName}}.csproj
      echo "${{ parameters.registryName }}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}}"
      docker push ${{ parameters.registryName }}.azurecr.io/${{parameters.imageName}}:${{parameters.imageVersion}}
    name: pushImage    