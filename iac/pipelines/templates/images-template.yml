parameters:
  registryName: ''
  pipelineAcrConnection: ''
  selectedImage: ''  
  imageVersion: ''
  images:
  - name: analyzer
    imageName: 'backend_analyzer'
    imagePath: './src/backend/analyzer/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: beapi
    imageName: 'backend_beapi'
    imagePath: './src/backend/beapi/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: infra
    imageName: 'backend_infra'
    imagePath: './src/backend/infra/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: mongowriter
    imageName: 'backend_mongowriter'
    imagePath: './src/backend/mongowriter/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: twinlistener
    imageName: 'backend_twinlistener'
    imagePath: './src/backend/twinlistener/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: unittests
    imageName: 'backend_unittests'
    imagePath: './src/backend/unittests/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: blobstreamer
    imageName: 'backend_blobstreamer'
    imagePath: './src/backend/Backend.BlobStreamer/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: iotlistener
    imageName: 'backend_iotlistener'
    imagePath: './src/backend/Backend.Iotlistener/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: keyholder
    imageName: 'backend_keyholder'
    imagePath: './src/backend/Backend.Keyholder/'
    dockerFilePath: './src/backend/infra/build/Dockerfile'
  - name: edge_conquest
    imageName: 'edge_conquest'
    imagePath: './src/edge/conquest/'
    imageVersion: 'v0.7.3'
    dockerFilePath: './src/edge/conquest/Dockerfile'

jobs:
- job: RetrieveImageInfoJob
  pool:
    name: $(AGENT_POOL)
    agent.name: aks-${{parameters.env}}-agent          
  displayName: Retrieve Image Information  
  steps:
  - ${{ each img in parameters.images }}:
    - ${{ if eq(parameters.selectedImage, img.name) }}:
    # - ${{ if and(eq(parameters.selectedImage, img.name), ne(parameters.selectedImage, 'all')) }}:
      - task: Bash@3
      #   displayName: Push Image
        displayName: 'Set ${{ parameters.imageName }} Info'
        inputs:
          targetType: inline
          script: |
            echo "Selected Image: ${{ parameters.selectedImage }}"
            echo "Image Name in Loop: ${{ img.name }}"          
            echo "ImageName:  ${{ img.imageName }}"
            echo "registryName:  ${{ parameters.selectedImage }}"
            echo "ImageVersion:  ${{ parameters.imageVersion }}"
            echo "registryName:  ${{ parameters.registryName }}"
            echo "ImagePath:  ${{ img.imagePath }}"

            echo "dockerFilePath:  ${{ img.dockerFilePath }}"
            echo "Setting Variables:"
            echo "Image Name: ${{ img.imageName }}"
            echo "##vso[task.setvariable variable=imageName;isOutput=true]${{ img.imageName }}"
            echo "##vso[task.setvariable variable=name;isOutput=true]${{ img.name }}"
            echo "##vso[task.setvariable variable=imageVersion;isOutput=true]${{ parameters.imageVersion }}"
            echo "##vso[task.setvariable variable=imagePath;isOutput=true]${{ img.imagePath }}"
            echo "##vso[task.setvariable variable=dockerFilePath;isOutput=true]${{ img.dockerFilePath }}"
            echo "##vso[task.setvariable variable=registryName;isOutput=true]${{ parameters.registryName }}"
            echo "##vso[task.setvariable variable=pipelineAcrConnection;isOutput=true]${{ parameters.pipelineAcrConnection }}"

            # echo "##vso[task.setvariable variable=imageName]${{ img.imageName }}" # set as a pipeline variable
            # echo "##vso[task.setvariable variable=imageVersion]${{ parameters.imageVersion }}"
            # echo "##vso[task.setvariable variable=image]${{ img.name }}"
            # echo "##vso[task.setvariable variable=imageName]${{ img.imageName }}"
            # echo "##vso[task.setvariable variable=imageVersion]${{ parameters.imageVersion }}"
            # echo "##vso[task.setvariable variable=imagePath]${{ img.imagePath }}"
            # echo "##vso[task.setvariable variable=dockerFilePath]${{ img.dockerFilePath }}"
            # echo "##vso[task.setvariable variable=registryName]${{ parameters.registryName }}"
            # echo "##vso[task.setvariable variable=pipelineAcrConnection]${{ parameters.pipelineAcrConnection }}"
          name: setImageInfo
      # env:
      #   imageName: $(imageName)
      #   imageVersion: $(imageVersion)
      #   imagePath: $(imagePath)
      #   dockerFilePath: $(dockerFilePath)
      #   registryName: $(registryName)
      #   pipelineAcrConnection: $(pipelineAcrConnection)        

    # - script: |
    #     # echo "name=${{ img.name }}" > $(Pipeline.Workspace)/${{img.name}}_info.txt
    #     # echo "imageName=${{ img.imageName }}" >> $(Pipeline.Workspace)/${{img.name}}_info.txt
    #     # echo "imageVersion=${{ parameters.imageVersion }}" >> $(Pipeline.Workspace)/${{img.name}}_info.txt
    #     # echo "imagePath=${{ img.imagePath }}" >> $(Pipeline.Workspace)/${{img.name}}_info.txt
    #     # echo "dockerFilePath=${{ img.dockerFilePath }}" >> $(Pipeline.Workspace)/${{img.name}}_info.txt
    #     cat $(Pipeline.Workspace)/src/${{img.name}}_info.txt
    #   name: setImageInfo # Assign a name to this step
    # - task: CopyFiles@2
    #   displayName: 'Copy scripts'
    #   inputs:
    #     contents: '$(Pipeline.Workspace)/${{img.name}}_info.txt'
    #     targetFolder: '$(Build.ArtifactStagingDirectory)'
    # - publish: $(Pipeline.Workspace)/${{img.name}}_info.txt
    #   displayName: 'Publish ${{img.name}} Artifact'
    #   artifact: ${{img.name}}_info_space
    # - publish: $(Build.ArtifactStagingDirectory)/${{img.name}}_info.txt
    #   displayName: 'Publish ${{img.name}} Artifact'
    #   artifact: ${{img.name}}_info
    # # - script: |
    #     IMAGE_NAME=${{ img.imageName }} && IMAGE_VERSION==${{ parameters.imageVersion }} && IMAGE_PATH=${{ img.imagePath }} && DOCKER_FILE=${{ img.dockerFilePath}}
    #     echo "##vso[task.setvariable variable=NewImageName;isoutput=true]$IMAGE_NAME"
    #     echo "##vso[task.setvariable variable=NewImageVersion;isoutput=true]$IMAGE_VERSION"
    #     echo "##vso[task.setvariable variable=NewImagePath;isoutput=true]$IMAGE_PATH"
    #     echo "##vso[task.setvariable variable=NewDockerFilePath;isoutput=true]$DOCKER_FILE"
    #   displayName: 'Set Image Information Variables for ${{ img.name }}'
    #   name: setImageInfo # Assign a name to this step
    #   outputs:
    #     NewImageName: $(NewImageName)
    #       NewImageVersion: $(NewImageVersion)
    #       NewImagePath: $(NewImagePath)
    #       NewDockerFilePath: $(NewDockerFilePath)
