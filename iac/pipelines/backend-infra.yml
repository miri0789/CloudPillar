
name: iac_backend_infra
trigger:
  - none

variables:
- group: arm-vg
- group: iac-backend-vg
- group: backend-secrets-vg

stages:
- stage: Validate_Files
  displayName: Validate Cloned Repo Files
  jobs: 

  - job: Validate_Backend_Files
    displayName: Validate IaC Backend Files Existence
    pool:
      vmImage: 'ubuntu-20.04'    
    steps:
    - checkout: self
      persistCredentials: true
      clean: true

    - task: Bash@3
      displayName: 'Tests'
      inputs:
        targetType: inline
        script: |
          echo "Build.BuildId - $(Build.BuildId)"
          echo "ARM_CLIENT_ID - $(iac-app-client-id)"
          echo "ARM_CLIENT_SECRET - $(iac-app-client-secret)"
          echo "ARM_TENANT_ID - $(ARM_TENANT_ID)"
          echo "ARM_SUBSCRIPTION_ID - $(ARM_SUBSCRIPTION_ID)"         
    
    - task: Bash@3
      displayName: 'Validate IaC Pipelines Files'
      inputs:
        targetType: inline
        script: |
          if [ ! -d iac/ ] || [ ! -d iac/pipelines/ ] || [ ! -f iac/pipelines/backend-infra.yml ]; then
            echo "Missing - IaC Pipelines Folder Or Files is Missing"
            exit 1
          fi
          echo "IaC & Pipelines Folders Exists"

    - task: Bash@3
      displayName: 'Validate TerraForm Backend Files'
      inputs:
        targetType: inline
        script: |
          if [ ! -d iac/terraform/backend ]; then
            echo "Folder - Terraform Backend Folder is Missing"
            exit 1
          elif [ ! -d iac/terraform/backend/terraform.tfstate.d ] || [ ! -f iac/terraform/backend/0-backend-variables.tf ] || [ ! -f iac/terraform/backend/1-main.tf ] || [ ! -f iac/terraform/backend/2-providers.tf ] || [ ! -f iac/terraform/backend/tf-backend-init.sh ] || [ ! -f iac/terraform/backend/tf-backend-apply.sh ]; then
            missing_files=()
            if [ ! -d iac/terraform/backend/terraform.tfstate.d ]; then
              missing_files+=("terraform.tfstate.d")
            fi
            if [ ! -f iac/terraform/backend/0-backend-variables.tf ]; then
              missing_files+=("0-backend-variables.tf")
            fi
            
            if [ ! -f iac/terraform/backend/1-main.tf ]; then
              missing_files+=("1-main.tf")
            fi
            
            if [ ! -f iac/terraform/backend/2-providers.tf ]; then
              missing_files+=("2-providers.tf")
            fi
            
            if [ ! -f iac/terraform/backend/tf-backend-init.sh ]; then
              missing_files+=("tf-backend-init.sh")
            fi
            
            if [ ! -f iac/terraform/backend/tf-backend-apply.sh ]; then
              missing_files+=("tf-backend-apply.sh")
            fi
            
            echo "One or more files are missing in the TF Backend directory (iac/terraform/backend/): ${missing_files[*]}"
            exit 1          
          
          fi
          echo "Terraform Backend Folder & Files Exists"

    - task: Bash@3
      displayName: 'Validate Env File Exists'
      inputs:
        targetType: inline
        script: |
          # if [ ! -f iac/terraform/.env ]; then
          if [ ! -f iac/terraform/Template.env ]; then
            echo "Env Variable File is Missing"
            exit 1
          fi
          echo "Env Variables Files Exist"

- stage: Initilize_Terraform
  displayName: Initilize Terraform Backend
  dependsOn: Validate_Files
  jobs:

  - job: Initilize_Terraform_Backend
    displayName: Initilize Terraform Backend
    pool:
      vmImage: 'ubuntu-20.04'    
    steps:
    - checkout: self
      persistCredentials: true
      clean: true

    - task: Bash@3
      displayName: 'Updating Env Variabless File'
      inputs:
        targetType: inline
        script: |

          sed -i "s/^tenant_id=.*/tenant_id=\"$(ARM_TENANT_ID)\"/" ../env/backend.tfvars
          sed -i "s/^subscription_id=.*/subscription_id=\"$(ARM_SUBSCRIPTION_ID)\"/" ../env/backend.tfvars
          sed -i "s/^Location=.*/Location=\"$(LOCATION)\"/" ../env/backend.tfvars
          sed -i "s/^region=.*/region=\"$(REGION)\"/" ../env/backend.tfvars
          sed -i "s/^tf_backend_rg=.*/tf_backend_rg=\"$(TF_BACKEND_RG)\"/" ../env/backend.tfvars
          sed -i "s/^tf_backend_sa=.*/tf_backend_sa=\"$(TF_BACKEND_SA)\"/" ../env/backend.tfvars
          sed -i "s/^tf_backend_container=.*/tf_backend_container=\"$(TF_BACKEND_CONTAINER)\"/" ../env/backend.tfvars          
          sed -i "s/^tfstate_key=.*/tfstate_key=\"$(TFSTATE_KEY)\"/" ../env/backend.tfvars
          sed -i "s/^tf_backend_kv=.*/tf_backend_kv=\"$(TF_BACKEND_KEYVAULT)\"/" ../env/backend.tfvars
          sed -i "s/^client_id=.*/client_id=\"$(ARM_CLIENT_ID)\"/" ../env/backend.tfvars
          sed -i "s/^client_secret=.*/client_secret=\"$(ARM_CLIENT_SECRET)\"/" ../env/backend.tfvars          
          cat ../env/backend.tfvars
        workingDirectory: 'iac/terraform/backend'

    - task: Bash@3
      displayName: 'Azure Login'
      inputs:
        targetType: inline
        script: |
          az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
          echo "Azure Login Successfull"
        workingDirectory: 'iac/terraform/backend'

    - task: Bash@3
      displayName: 'Initilize & Plan Terraform Backend'
      inputs:
        targetType: inline
        script: |
          export ARM_CLIENT_ID=$(iac-app-client-id)
          export ARM_CLIENT_SECRET=$(iac-app-client-secret)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          terraform init -var-file=../env/backend.tfvars -force-copy
          # terraform init -var-file=../env/backend.tfvars
          terraform plan -var-file=../env/backend.tfvars          
          echo "Terraform Backend Initilized"
        workingDirectory: 'iac/terraform/backend'


