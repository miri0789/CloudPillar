
name: ci_build_full_$(Rev:r)

trigger:
  batch: true
  branches:
    include:
    - "*"

variables:
- name: basePath
  value: src/backend/
- name: dockerFile
  value: infra/build/Dockerfile
- name: major
  value: $(grep -oP '^major=\K\d+' src/backend/version.txt)
- name: minor
  value: $(grep -oP '^minor=\K\d+' src/backend/version.txt)
- name: TIME
  value: $(date +%Y%m%d%H%M%S)
- name: GitBuildNumber
  value: $(git rev-list --count HEAD)
- name: registryName
  value: 'iotimageacr'
- name: dockerfilePath
  value: './src/edge/conquest/Dockerfile'
- name: pipelineAcrConnection
  value: 'iotacr'


parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd    
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: all
    values:
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener    
    # - edge_conquest

resources:
- repo: self

stages:
- stage: BuildSpecificImage
  displayName: Build Specific Image
  condition: ne('${{ parameters.image }}', 'all')
  jobs:
  - job: ConquestManualBuildTagPush
    displayName: Build, Tag, Push
    condition: eq('${{ parameters.image }}', 'edge_conquest')    
    variables:
      imageName: 'edge_conquest'
      imageVersion: 'v0.7.3'
      registryName: 'iotimageacr'
      dockerfilePath: './src/edge/conquest/Dockerfile'
      pipelineAcrConnection: 'iotacr'
    steps: # Changed from stages to steps
      - task: Docker@2
        displayName: 'Build and Push Image'
        inputs:
          command: 'buildAndPush'
          repository: '$(registryName).azurecr.io/$(imageName)'
          dockerfile: '$(dockerfilePath)'
          containerRegistry: '$(pipelineAcrConnection)'
          tags: '$(imageVersion)'
  - job: ManualBuildTagScanPush
    displayName: Build, Tag, Scan, and Push
    condition: ne('${{ parameters.image }}', 'edge_conquest')    
    steps: # Changed from stages to steps
    - template: templates/build-tag-scan-push-template.yml
    - bash: |
        imageName=$(grep -A1 "name: '${{ parameters.image }}'" templates/build-tag-scan-push-template.yml | grep 'imageName' | awk '{print $2}' | tr -d "'")
        imagePath=$(grep -A2 "name: '${{ parameters.image }}'" templates/build-tag-scan-push-template.yml | grep 'imagePath' | awk '{print $2}' | tr -d "'")
        echo -e "Image Name: $imageName\nImage Path: $imagePath"
      displayName: 'Set Image Name and Path'      





# name: ci_build

# trigger:
# # - none
# # - $(Build.SourceBranchName)
# - main

# parameters:
#   - name: env
#     displayName: Select Environment to deploy
#     type: string
#     default: dev
#     values:
#     - tst
#     - dev
#     - stg
#     - prd
#   - name: image
#     displayName: Select Image to Build and Scan
#     type: string
#     default: blobstreamer
#     values:
#     # - all
#     - analyzer
#     - beapi
#     - blobstreamer
#     - iotlistener
#     - keyholder
#     - mongowriter
#     - twinlistener

# variables:
# - group: arm-vg
# - group: iac-backend-vg
# - group: aks-backend-vg
# - group: backend-secrets-vg
# # - group: images-vg


# stages:
# - stage: Update_Build_Tag_Scan_Push
#   displayName: Update Version, Build, Tag and Push Images
#   jobs:

#   - job: Update_Version_Tag_Build_Image
#     displayName: Updating Version Label, Building and Tagging Images
#     pool:
#       name: $(AGENT_POOL)
#       agent.name: aks-${{parameters.env}}-agent 
#       # agent.name: iac-${{parameters.env}}-agent 
#     steps:
#     - checkout: self
#       persistCredentials: true
#       clean: true
#     - task: Bash@3
#       displayName: Build & Tag Image
#       inputs:
#         targetType: inline
#         script: |
#           az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
#           az account set --subscription $(ARM_SUBSCRIPTION_ID)
#           echo "Azure Login Successfull"
#           sudo az acr login -n $(ACR_NAME)
#           echo "Updating ${{parameters.image}} Informational Version Label"
#           TIMESTAMP=$(date +%Y%m%d%H%M%S) && BuildNumber=$(git rev-list --count HEAD) && sed -i "s/_BUILDNUM_/${BuildNumber}/g; s/_TIMESTAMP_/${TIMESTAMP}/g" src/backend/${{parameters.image}}/${{parameters.image}}.csproj
#           sudo docker build -t $(ACR_NAME).azurecr.io/backend_${{parameters.image}}.dll --build-arg DLL=backend_${{parameters.image}}.dll -f ./src/backend/infra/build/Dockerfile ./src/backend/${{parameters.image}}
          
#     - task: Bash@3
#       displayName: Trviy Scan Image
#       inputs:
#         targetType: inline
#         script: |
#           # sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL $(ACR_NAME).azurecr.io/backend_${{parameters.image}}.dll:latest
#           sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image  --severity HIGH,CRITICAL $(ACR_NAME).azurecr.io/backend_${{parameters.image}}.dll:latest

#     - task: Bash@3
#       displayName: Push Image to ACR
#       inputs:
#         targetType: inline
#         script: |
#           sudo docker push $(ACR_NAME).azurecr.io/backend_${{parameters.image}}.dll:latest
