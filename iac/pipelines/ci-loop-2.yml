
name: ci_loop_test_$(Rev:r)

trigger:
  batch: true
  branches:
    include:
    - main
    - $(Build.SourceBranchName)
    exclude:
    - '*'
  paths:
    include:
    - src/edge/conquest/*
    - src/backned/*
    exclude:
    - '*'    

resources:
- repo: self


parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd    
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: all
    values:
    - beapi
    - edge_conquest
    - iotlistener
    - all
    - analyzer
    - blobstreamer
    - keyholder
    - mongowriter
    - twinlistener    




variables:
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

- name: major
  value: $(grep -oP '^major=\K\d+' src/backend/version.txt)
- name: minor
  value: $(grep -oP '^minor=\K\d+' src/backend/version.txt)
- name: TIME
  value: $(date +%Y%m%d%H%M%S)
- name: GitBuildNumber
  value: $(git rev-list --count HEAD)
- name: registryName
  value: 'iotimageacr'
- name: pipelineAcrConnection
  value: 'iotacr'  

- name: images
  value: '[
    {
        
        "name": "analyzer",
        "imageName": "backend_analyzer",
        "imagePath": "./src/backend/analyzer/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "beapi",
        "imageName": "backend_beapi",
        "imagePath": "./src/backend/beapi/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "infra",
        "imageName": "backend_infra",
        "imagePath": "./src/backend/infra/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "mongowriter",
        "imageName": "backend_mongowriter",
        "imagePath": "./src/backend/mongowriter/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "twinlistener",
        "imageName": "backend_twinlistener",
        "imagePath": "./src/backend/twinlistener/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "unittests",
        "imageName": "backend_unittests",
        "imagePath": "./src/backend/unittests/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "blobstreamer",
        "imageName": "backend_blobstreamer",
        "imagePath": "./src/backend/Backend.BlobStreamer/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "iotlistener",
        "imageName": "backend_iotlistener",
        "imagePath": "./src/backend/Backend.Iotlistener/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "keyholder",
        "imageName": "backend_keyholder",
        "imagePath": "./src/backend/Backend.Keyholder/",
        "dockerFilePath": "./src/backend/infra/build/Dockerfile",
        "imageVersion": "1.0.0.0"
    },
    {
        "name": "edge_conquest",
        "imageName": "edge_conquest",
        "imagePath": "./src/edge/conquest/",
        "imageVersion": "v0.7.3",
        "dockerFilePath": "./src/edge/conquest/Dockerfile"
    }
]'



stages:
- stage: Build
  displayName: Build stage
  jobs:
  # loop through the images variable and pass each image object to the template file as a parameter
  - ${{ each image in fromJson(variables['images']) }}:
    # check if the image name matches the user input or the user input is 'all'
    - ${{ if eq(parameters['image'], image.name) }}:
      # use the template file that contains the task that uses the image object details as parameters
      - template: template/clean-build-scan-push.yml
        parameters:
          image: ${{ image }}