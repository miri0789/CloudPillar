name: selective_ci$_(Rev:r)
# name: selective_ci


# 1. The branch trigger should be chnages in the current branch
trigger:
  batch: true
  branches:
    include:
    - main
    - test-selective-build
    - testselbuild
    - "*"
    # - $(Build.SourceBranchName)
    # - main
    # - *
  # paths:
  #   include:
  #   - src/backend/*
# 2. The pipeline should be triggered on every change in the repository
# pr: none


parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd
  - name: image
    displayName: Select Image to Build and Scan
    type: string
    default: iotlistener
    values:
    # - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener
  - name: versionString
    displayName: Select Major & Minor Verson
    type: string
    default: latest # 1.0
    values:
    - latest # 1.0
    - nextminor # 1.1
    - nextmajor #2.0

# * Variables
variables:
#* Variable Groups
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

#* Dynamic Variables
- name: TIME
  value: $(date +%Y%m%d%H%M%S)
- name: GitBuildNumber
  value: $(git rev-list --count HEAD)
- name: RepoName
  value: $(Build.Repository.Name)
# - name: RepoName2
#   value: $(git config --get remote.origin.url | sed 's/.*\///')
- name: SourceBranchName
  value: $(Build.SourceBranchName)
- name: DockerBasePath
  value: src/backend
- name: major
  value: $(grep -oP '^major=\K\d+' src/backend/version.txt)
- name: minor
  value: $(grep -oP '^minor=\K\d+' src/backend/version.txt)
- name: patch
  value: $[counter(variables['build.reason'], 0)]  
# $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 100)]  



stages:
- stage: TestStage
  displayName: Test_Stage_0
  jobs:
  - job: TestJob1
    displayName: Test_Stage_1
    condition: always()
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    steps:
    - checkout: self
      persistCredentials: true
      # This Step will print the Repo Name, Source Branch Name (from ADO), Current Branch Name (Locally), changed files names and path to the console
    - bash: |
        echo -e "\n========================================\n\t Testing\n========================================"        
        echo -e "\n----------------------Testing Build Number\n----------------------"
        Version=$(major).$(minor)
        TAG="$Version.$(GitBuildNumber).$(TIME)"

        echo "Git Build: $(GitBuildNumber)"
        echo "BuildNumber: $(BuildNumber)"
        echo 'Build.BuildNumber: $(Build.BuildNumber)'
        echo "Patch: $(patch)"
        echo "$(Build.DefinitionName)_$(TIMESTAMP)$(Rev:r)"
        echo "Version: $Version"
        echo "TAG: $TAG"



- stage: GetImages
  displayName: Get_Changed_Images
  jobs:
  - job: Get_Changed_Files
    displayName: Get Changed Files
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    steps:
    - checkout: self
      persistCredentials: true
      # This Step will print the Repo Name, Source Branch Name (from ADO), Current Branch Name (Locally), changed files names and path to the console
    - bash: |        
        BRANCH=$(SourceBranchName)
        git fetch --all
        git merge-base origin/main $BRANCH
        git checkout $BRANCH
        FILES=$(git diff --name-only origin/main..$BRANCH)
        echo "${FILES[@]}"
        
      displayName: Get Changed Files






- stage: Test1
  displayName: Test_Stage_1
  jobs:
  - job: ADO_Repo
    displayName: Selective Build
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    steps:
    - checkout: self
      persistCredentials: true
      # This Step will print the Repo Name, Source Branch Name (from ADO), Current Branch Name (Locally), changed files names and path to the console
    - bash: |
        
        echo -e "\n========================================\n\t ADO Started\n========================================"        
        echo "Repo Name: $(RepoName)"
        echo "Source Branch Name: $(SourceBranchName)"
        
        echo -e "Path: $PWD\n"
        echo -e "Local Path: $(Build.Repository.LocalPath)\n"
        
        echo -e "Docker Base Path: $(DockerBasePath)\n"

        
        
        BRANCH=$(SourceBranchName)
        git fetch --all
        git merge-base origin/main $BRANCH
        git checkout $BRANCH

        FILES=$(git diff --name-only origin/main..$BRANCH) # Changed Files Names and Path

        echo -e "\n\nChanged Files Names and Path: \n----------------------------------------------------"
        echo "${FILES[@]}"
        # echo "Changed Files Names and Path2: $(Files)"

        # DockerBasePath=$(echo $(Build.Repository.LocalPath)/src/backend) 
        DOCKER_BASE_PATH=$(DockerBasePath) 
        echo -e "Docker Base Path: $DOCKER_BASE_PATH"
        echo -e "\n========================================\n\t File By File1\n========================================"
        Version=$(major).$(minor)
        echo "Version: $Version"
        TAG="$Version.$(GitBuildNumber).$(TIME)"


        git diff --name-only origin/main..$BRANCH | while read -r file; do
          filename=$(basename "$file")
          lower_filename=$(echo "$filename" | tr '[:upper:]' '[:lower:]')
          echo "Check if $file has $DOCKER_BASE_PATH"
          lower_file=$(echo "$file" | tr '[:upper:]' '[:lower:]')
          if [[ $file == *$DOCKER_BASE_PATH* ]]; then
            echo -e "\n\n"
            # Check if filename as lower string contain the image name as lower string
            IMAGE="${{parameters.image}}"
            echo "IMAGE: $IMAGE"
            echo "File: $file"
            if [[ $lower_file == *$IMAGE*.csproj ]]; then
              
              echo "YES ! $file contains $IMAGE" 
              echo "File Changed: $filename"
              echo "Image Name: $IMAGE"
              
              IMAGE_PATH=$filename
              file_path_without_filename=$(dirname "$file")
              az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
              az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo "Azure Login Successfull"
              sudo az acr login -n $(ACR_NAME)
              echo "Updating ${{parameters.image}} Informational Version Label"
              echo "TAG: $TAG"
              # sed -i "s/_BUILDNUM_/${BuildNumber}/g; s/_TIMESTAMP_/${TIMESTAMP}/g" src/backend/${{parameters.image}}/${{parameters.image}}.csproj
              ## sudo docker build -t $(ACR_NAME).azurecr.io/backend_${{parameters.image}}:$TAG --build-arg DLL=backend_${{parameters.image}}.dll -f ./src/backend/infra/build/Dockerfile ./$file_path_without_filename
              # sudo docker build -t $(ACR_NAME).azurecr.io/backend_${{parameters.image}} --build-arg DLL=backend_${{parameters.image}}.dll -f ./src/backend/infra/build/Dockerfile ./$file_path_without_filename
              ## sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image  --severity HIGH,CRITICAL $(ACR_NAME).azurecr.io/backend_${{parameters.image}}:$TAG
              ## sudo docker push $(ACR_NAME).azurecr.io/backend_${{parameters.image}}:$TAG
            else
              :
            fi
          else
            :
          fi
        done

      name: print_ado_repo
          