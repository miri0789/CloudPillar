name: selective_ci_$(Rev:.r)
# name: selective_ci


# 1. The branch trigger should be chnages in the current branch
trigger:
  batch: true
  branches:
    include:
    - main
    - test-selective-build
    - TestBranch
    - "*"
    # - $(Build.SourceBranchName)
    # - main
    # - *
  # paths:
  #   include:
  #   - src/backend/*
# 2. The pipeline should be triggered on every change in the repository
# pr: none


parameters:
  - name: env
    displayName: Select Environment to deploy
    type: string
    default: dev
    values:
    - tst
    - dev
    - stg
    - prd
  - name: image

    displayName: Select Image to Build and Scan
    type: string
    default: iotlistener
    values:
    # - all
    - analyzer
    - beapi
    - blobstreamer
    - iotlistener
    - keyholder
    - mongowriter
    - twinlistener
  - name: versionString
    displayName: Select Major & Minor Verson
    type: string
    default: latest # 1.0
    values:
    - latest # 1.0
    - nextminor # 1.1
    - nextmajor #2.0

# * Variables
variables:
#* Variable Groups
- group: arm-vg
- group: iac-backend-vg
- group: aks-backend-vg
- group: backend-secrets-vg

#* Dynamic Variables
- name: TIMESTAMP
  value: $(date +%Y%m%d%H%M%S)
- name: BuildNumber
  value: $(git rev-list --count HEAD)
- name: RepoName
  value: $(Build.Repository.Name)
- name: RepoName2
  value: $(git config --get remote.origin.url | sed 's/.*\///')
- name: SourceBranchName
  value: $(Build.SourceBranchName)
- name: DockerBasePath
  value: $(Build.Repository.LocalPath)/src/backend
  # value: $(git diff --name-only origin/main..$(Build.SourceBranchName))
  # value: $(git diff --name-only HEAD~1..$(Build.SourceBranchName))
  # value: $(git diff --name-only HEAD~1..$(Build.SourceBranchName))



stages:
- stage: Test
  displayName: Test_Stage
  jobs:
  - job: ADO_Repo
    displayName: Print ADO Repo
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    steps:
    - checkout: self
      persistCredentials: true
      # This Step will print the Repo Name, Source Branch Name (from ADO), Current Branch Name (Locally), changed files names and path to the console
    - bash: |
        pwd
        git fetch --all
        git merge-base origin/main $(SourceBranchName)
        git checkout $BRANCH

        FILES=$(git diff --name-only origin/main..$(SourceBranchName)) # Changed Files Names and Path

        echo "Repo Name: $(RepoName)"
        echo "Source Branch Name: $(SourceBranchName)"
        echo "ADO"
        echo "Changed Files Names and Path: ${FILES[@]}"
        echo "Changed Files Names and Path2: $(Files)"



        echo "ADO"



        for file in "${Files[@]}"
        do
          echo $file
        done     

      name: print_ado_repo
          
- stage: Test2
  displayName: Test2_Stage
  jobs:
  - job: Local_Repo
    displayName: 'Print Local Repo'
    pool:
      name: $(AGENT_POOL)
      agent.name: aks-${{parameters.env}}-agent
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    # This Step will print the Repo Name, Source Branch Name (from ADO), Current Branch Name (Locally), changed files names and path to the console
    - bash: |
        echo -e "\n\nLocal\n======================================="
        pwd
        
        REPO=$(RepoName)
        BRANCH=$(SourceBranchName)

        echo -e "\n\tRepo Name: $REPO,\n\tSource Branch Name: $BRANCH"

        git fetch --all
        git merge-base origin/main $(SourceBranchName)
        git checkout $BRANCH

        # FILES=$(git diff --name-only origin/main..$(SourceBranchName)) # Changed Files Names and Path
        # echo "Changed Files Names and Path: ${FILES[@]}"

        FILES=($(git diff --name-only origin/main..$(SourceBranchName)))
        echo "Changed Files Names and Path: ${FILES[@]}"
        echo -e "\n\nDocker Base Path: $DockerBasePath\n"
        for file in "${Files[@]}"
        do
          echo "FILE: $file"
          if [[ $file == *$DockerBasePath* ]]; then
            echo "$file contains $DockerBasePath"
          else
            echo "$file does not contain $DockerBasePath"
          fi
        done

      name: print_local_repo