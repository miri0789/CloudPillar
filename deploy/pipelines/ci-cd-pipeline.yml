parameters:
- name: env
  displayName: Select Environment to deploy
  type: string
  default: dev
  values:
  - tst
  - dev
  - stg
  - prd 
- name: services
  displayName: Select services to deploy
  type: object
  default:
  - BlobStreamer
  - Iotlistener
  - Keyholder 
  - BEApi 
trigger:
  batch: true
  branches:
    include:
    - main
    - $(Build.SourceBranchName)


stages:  
- stage: Generate_Build_Number
  jobs:    
    - job: generateVersionLabel
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - bash: |
          IFS='.' read -r -a parts <<< "1.3.$(Build.BuildNumber)"
          buildDateStr="${parts[2]}"
          # Convert YYYYMMDD to seconds since epoch, then to days, adjusting for start date
          startDate=$(date -d "20240101" +%s)
          buildDate=$(date -d "${buildDateStr}" +%s)
          # Calculate difference in days
          let daysDiff=($buildDate-$startDate)/86400
          if [ $daysDiff -lt 0 ]; then daysDiff=0; fi
          versionLabel="${parts[0]}.${parts[1]}.$daysDiff.${parts[3]}"
          echo "##vso[task.setvariable variable=versionLabel]$versionLabel"
        displayName: 'Calculate Days Since 1.1.2024'
      - script: | 
            echo $(versionLabel)
        displayName: 'Display New Build Number'
- stage: CI_Stage  
  dependsOn: Generate_Build_Number
  jobs:
  - ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), eq(parameters['env'], 'dev')) }}:
    - job: RunUnitTests
      displayName: 'Run_Unit_Tests'
      pool:
        vmImage: 'windows-latest'
      steps:
      - task: NuGetAuthenticate@1
        displayName: 'Authenticate to NuGet'

      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Tests'
        inputs:
          command: 'test'
          arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
          publishTestResults: true
          projects: '**/*Tests/*.csproj'
        
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - job: Agent_CI_Job    
    variables:
      versionLabel: $[ stageDependencies.Generate_Build_Number.generateVersionLabel.outputs['versionLabel'] ]
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: | 
        echo $(versionLabel)
      displayName: 'Display New Build Number'
    - task: NuGetAuthenticate@1
      displayName: 'Authenticate to NuGet'
    - task: Docker@2
      displayName: Agent Dockerize
      inputs:
        command: build
        repository: agent
        dockerfile: ./src/agent/CloudPillar.Agent/Dockerfile
        buildContext: src
        tags: aux-build
        arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg IMAGE_TAG=$(versionLabel)'

    - script: |
        CONTAINER_ID=$(docker create agent:aux-build)
        docker cp $CONTAINER_ID:/app/cloudpillar.zip .
        docker cp $CONTAINER_ID:/app/export ./export
        docker rm $CONTAINER_ID
        mv ./cloudpillar.zip ./cloudpillar-agent-publish-$(versionLabel).zip
        ls -al ./cloudpillar-agent-publish-$(versionLabel).zip
      displayName: 'Extract cloudpillar.zip from Image'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish cloudpillar.zip to Artifacts'
      inputs:
        pathtoPublish: ./cloudpillar-agent-publish-$(versionLabel).zip
        artifactName: 'cloudpillar'
    
    - task: ArchiveFiles@2
      displayName: 'Archive Agent src code'
      inputs:
        rootFolderOrFile: './export'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/cloudpillar-agent-$(versionLabel).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Agent src code to Artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/cloudpillar-agent-$(versionLabel).zip'
        artifactName: 'cloudpillar'

  - ${{each item in parameters.services}}:    
    - job: '${{ item }}_CI_Job'
      variables:
        versionLabel: $[ stageDependencies.Generate_Build_Number.generateVersionLabel.outputs['versionLabel'] ]
      pool:
        vmImage: ubuntu-latest
      steps: 
      - script: |
          case "${{ item }}" in
            "BlobStreamer") echo "##vso[task.setvariable variable=PORT]8081" ;;
            "Keyholder") echo "##vso[task.setvariable variable=PORT]8082" ;;
            "BEApi") echo "##vso[task.setvariable variable=PORT]8083" ;;
            *) echo "##vso[task.setvariable variable=PORT]8080" ;;
          esac
          echo "Port for ${{ item }}: $PORT"
        displayName: 'Set service port'

      - task: NuGetAuthenticate@1
        displayName: 'Authenticate to NuGet'

      - task: Docker@2
        displayName: '${{ item }} Dockerize'
        inputs:
          repository: 'cloudpillar${{ lower(item) }}service'
          containerRegistry: 'CP ${{ parameters.env }} docker registry'
          command: 'build'
          Dockerfile: './src/backend/Infra/build/Dockerfile'
          buildContext: src
          tags: '$(versionLabel)'
          arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg DLL=${{ item }} --build-arg PORT=$(PORT) --build-arg IMAGE_TAG=$(versionLabel)'        
            
      - script: |
          SCAN_RESULT=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL,MEDIUM cp${{ parameters.env }}acr.azurecr.io/cloudpillar${{ lower(item) }}service:$(versionLabel))
          echo "$SCAN_RESULT" 
          if [[ $SCAN_RESULT == *"CRITICAL"* && "$SCAN_RESULT" != *"CRITICAL: 0"* ]]; then
            echo "Critical vulnerabilities found. Failing the pipeline."
            exit 1  # This will cause the pipeline to fail
          fi
        displayName: '${{ item }} Security Scan'

      - ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(parameters['env'], 'dev')) }}:
        - task: Docker@2
          displayName: '${{ item }} Docker Push'
          inputs:
            command: 'push' 
            repository: 'cloudpillar${{ lower(item) }}service'
            containerRegistry: 'cp ${{ parameters.env }} docker registry'
            tags: '$(versionLabel)'


- ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(parameters['env'], 'dev')) }}:
  - ${{ if or(eq(parameters.env, 'dev'),eq(parameters.env, 'tst')) }}:
    - stage: CD_Stage
      jobs:              
      - job: CD_Job        
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: HelmDeploy@0
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscription: CloudPillar ${{ parameters.env }}
            azureResourceGroup: 'cp-ms-${{ parameters.env }}-rg'
            kubernetesCluster: 'cp-${{ parameters.env }}-aks'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: 'deploy/backend/'
            releaseName: 'cloudpillarback'
            overrideValues: 'image.tag=$(versionLabel)'
            valueFile: 'deploy/backend/environments/values-${{ parameters.env }}.yaml'
            arguments: '--debug --timeout 15m0s'
            
  - ${{ if and(ne(parameters.env, 'dev'),ne(parameters.env, 'tst')) }}:
    - stage: CD_Stage
      jobs:  
      - job: Start_VM_Job
        pool:
          vmImage: ubuntu-latest
        steps:
        - checkout: none
        - task: AzureCLI@1
          displayName: 'Start VM'
          inputs:
            azureSubscription: 'CloudPillar ${{ parameters.env }}'
            scriptLocation: inlineScript
            inlineScript: |
              az vm start -g cp-ms-${{ parameters.env }}-rg -n aks-${{ parameters.env }}-vm
            
      - job: CD_Job
        dependsOn: Start_VM_Job
        pool:
          name: CloudPillar-Pool
          demands:
          - agent.name -equals cpaks-${{ parameters.env }}-vm-agent
        steps:
        - task: HelmDeploy@0
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscription: CloudPillar ${{ parameters.env }}
            azureResourceGroup: 'cp-ms-${{ parameters.env }}-rg'
            kubernetesCluster: 'cp-${{ parameters.env }}-aks'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: 'deploy/backend/'
            releaseName: 'cloudpillarback'
            overrideValues: 'image.tag=$(versionLabel)'
            valueFile: 'deploy/backend/environments/values-${{ parameters.env }}.yaml'
            arguments: '--debug --timeout 15m0s'
            
      - job: Stop_VM_Job
        dependsOn: CD_Job
        pool:
          vmImage: ubuntu-latest
        steps:
        - checkout: none
        - task: AzureCLI@1
          displayName: 'Stop VM'
          inputs:
            azureSubscription: 'CloudPillar ${{ parameters.env }}'
            scriptLocation: inlineScript
            inlineScript: |
              az vm deallocate -g cp-ms-${{ parameters.env }}-rg -n aks-${{ parameters.env }}-vm