parameters:
- name: imagetag
  type: string
  default: $(Build.BuildNumber)
- name: env
  displayName: Select Environment to deploy
  type: string
  default: dev
  values:
  - tst
  - dev
  - stg
  - prd   
- name: services
  displayName: Select services to deploy
  type: object
  default:
  - BlobStreamer
  - Iotlistener
  - Keyholder  
trigger:
- none
stages:
  
- stage: CI_Stage
  jobs:
  - ${{each item in parameters.services}}:
    - job: ${{ item }}_CI_Platform_Job
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: NuGetAuthenticate@1
          displayName: 'Authenticate to NuGet'

        - task: Docker@2
          displayName: '${{ item }} service dockerize'
          inputs:
            repository: 'cloudpillar${{ lower(item) }}service'
            containerRegistry: 'CP ${{ parameters.env }} docker registry'
            command: 'build'
            Dockerfile: './src/backend/infra/build/Dockerfile'
            buildContext: src
            tags: '$(Build.BuildNumber)'
            arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg DLL=Backend.${{ item }}'        
        
        - script: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL cp${{ parameters.env }}acr.azurecr.io/cloudpillar${{ lower(item) }}service:$(Build.BuildNumber)
          displayName: 'Security Scan with Trivy'
          
        - task: Docker@2
          displayName: 'Docker Push'
          inputs:
            command: 'push' 
            repository: 'cloudpillar${{ lower(item) }}service'
            containerRegistry: 'CP ${{ parameters.env }} docker registry'
            tags: '$(Build.BuildNumber)'
        
        - script: |    
            files=$(git diff --name-only HEAD~ HEAD)
            echo $files
            
- stage: CD_Stage
  jobs:  
  - job: Start_VM_Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: none
    - task: AzureCLI@1
      displayName: 'Start VM'
      inputs:
        azureSubscription: 'CloudPillar ${{ parameters.env }}'
        scriptLocation: inlineScript
        inlineScript: |
          az vm start -g cp-ms-${{ parameters.env }}-rg -n aks-${{ parameters.env }}-vm
          
  # - job: CD_Job
  #   pool:
  #     name: Cloud-Pillar-Pool
  #     demands:
  #     - agent.name -equals aks-${{ parameters.env }}-vm-agent
  #   steps:
  #   - task: HelmDeploy@0
  #     inputs:
  #       connectionType: 'Azure Resource Manager'
  #       azureSubscription: CloudPillar Dev
  #       azureResourceGroup: 'cp-ms-${{ parameters.env }}-rg'
  #       kubernetesCluster: 'cp-${{ parameters.env }}-aks'
  #       command: 'upgrade'
  #       chartType: 'FilePath'
  #       chartPath: 'deploy/backend/templates'
  #       releaseName: 'cartonet'
  #       overrideValues: 'image.tag=${{ parameters.imagetag }}'
  #       valueFile: 'deploy/backend/environments/values-${{ parameters.env }}.yaml'
  #       arguments: '--debug --timeout 20m0s'
  # - job: Stop_VM_Job
  #   dependsOn: CD_Job
  #   pool:
  #     vmImage: ubuntu-latest
  #   steps:
  #   - checkout: none
  #   - task: AzureCLI@1
  #     displayName: 'Stop VM'
  #     inputs:
  #       azureSubscription: 'CloudPillar ${{ parameters.env }}'
  #       scriptLocation: inlineScript
  #       inlineScript: |
  #         az vm deallocate -g cp-ms-${{ parameters.env }}-rg -n aks-${{ parameters.env }}-vm