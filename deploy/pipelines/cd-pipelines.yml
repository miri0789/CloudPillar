variables:
- name: timelabel
  value: $[format('{0:yyyyMMddHHmmss}', pipeline.startTime)]
parameters:
- name: imagetag
  type: string
  default: $(Build.BuildNumber)
- name: env
  displayName: Select Environment to deploy
  type: string
  default: dev
  values:
  - tst
  - dev
  - stg
  - prd   
- name: services
  displayName: Select services to deploy
  type: object
  default:
  - BlobStreamer
  - Iotlistener
  - Keyholder  
trigger:
  batch: true
  branches:
    include:
    - main
    - $(Build.SourceBranchName)
    exclude:
    - '*'
stages:
  
- stage: CI_Stage
  jobs:
  - job: Agent_CI_Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NuGetAuthenticate@1
      displayName: 'Authenticate to NuGet'
    - task: Docker@2
      displayName: Agent Dockerize
      inputs:
        command: build
        repository: agent
        dockerfile: ./src/agent/CloudPillar.Agent/Dockerfile
        buildContext: src
        tags: aux-build
        arguments: --build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)

    - script: |
        CONTAINER_ID=$(docker create $(imageName):aux-build)
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL CONTAINER_ID
        docker cp $CONTAINER_ID:/app/cloudpillar.zip .
        docker rm $CONTAINER_ID
        mv ./cloudpillar.zip ./cloudpillar-$(imageName)-${{ parameters.imagetag }}.$(timelabel).zip
        ls -al ./cloudpillar-$(imageName)-${{ parameters.imagetag }}.$(timelabel).zip
      displayName: 'Extract POC cloudpillar.zip from Image'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish cloudpillar.zip to Artifacts'
      inputs:
        pathtoPublish: ./cloudpillar-agent-${{ parameters.imagetag }}.$(timelabel).zip
        artifactName: 'cloudpillar'
        publishLocation: 'Container'  

  - ${{each item in parameters.services}}:
      - job: '${{ item }}_CI_Job'
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: NuGetAuthenticate@1
          displayName: 'Authenticate to NuGet'
        - task: Docker@2
          displayName: '${{ item }} Dockerize'
          inputs:
            repository: 'cloudpillar${{ lower(item) }}service'
            containerRegistry: 'CP ${{ parameters.env }} docker registry'
            command: 'build'
            Dockerfile: './src/backend/infra/build/Dockerfile'
            buildContext: src
            tags: '${{ parameters.imagetag }}.$(timelabel)'
            arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg DLL=Backend.${{ item }}'        
            
        - script: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL cp${{ parameters.env }}acr.azurecr.io/cloudpillar${{ lower(item) }}service:${{ parameters.imagetag }}.$(timelabel)
            displayName: '${{ item }} Security Scan'
            
        - task: Docker@2
          displayName: '${{ item }} Docker Push'
          inputs:
            command: 'push' 
            repository: 'cloudpillar${{ lower(item) }}service'
            containerRegistry: 'cp ${{ parameters.env }} docker registry'
            tags: '$(parameters.imagetag).$(timelabel)'
      
    # - job: ${{ item }}_CI_Ablation_Job
    #     pool:
    #       vmImage: ubuntu-latest
    #     steps:
    #     - task: Docker@2
    #       displayName: Agent Dockerize
    #       inputs:
    #         command: build
    #         repository: agent
    #         dockerfile: ./src/agent/CloudPillar.Agent/Dockerfile
    #         buildContext: src
    #         tags: aux-build
    #         arguments: --build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)

    #     - script: |
    #         CONTAINER_ID=$(docker create $(imageName):aux-build)
    #         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL CONTAINER_ID
    #         docker cp $CONTAINER_ID:/app/cloudpillar.zip .
    #         docker rm $CONTAINER_ID
    #         mv ./cloudpillar.zip ./cloudpillar-$(imageName)-${{ parameters.imagetag }}.$(timelabel).zip
    #         ls -al ./cloudpillar-$(imageName)-${{ parameters.imagetag }}.$(timelabel).zip
    #       displayName: 'Extract POC cloudpillar.zip from Image'

    #     - task: PublishBuildArtifacts@1
    #       displayName: 'Publish cloudpillar.zip to Artifacts'
    #       inputs:
    #         pathtoPublish: ./cloudpillar-agent-${{ parameters.imagetag }}.$(timelabel).zip
    #         artifactName: 'cloudpillar'
    #         publishLocation: 'Container'  
        
        - script: |
            $files=$(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
            $temp=$files -split ' '
            $count=$temp.Length
            echo "Total changed $count files"
            echo $files
        - task: Bash@3
          name: SetBackendImagesJson
          inputs:
            targetType: 'inline'
            script: |
              $files = git diff --name-only @~ @
              echo "mmmmmmmmmm"
              echo $files


- stage: CD_Stage
  jobs:  
  - job: Start_VM_Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: none
    - task: AzureCLI@1
      displayName: 'Start VM'
      inputs:
        azureSubscription: 'CloudPillar ${{ parameters.env }}'
        scriptLocation: inlineScript
        inlineScript: |
          az vm start -g cp-ms-${{ parameters.env }}-rg -n aks-${{ parameters.env }}-vm
          
  # - job: CD_Job
  #   pool:
  #     name: Cloud-Pillar-Pool
  #     demands:
  #     - agent.name -equals aks-${{ parameters.env }}-vm-agent
  #   steps:
  #   - task: HelmDeploy@0
  #     inputs:
  #       connectionType: 'Azure Resource Manager'
  #       azureSubscription: CloudPillar Dev
  #       azureResourceGroup: 'cp-ms-${{ parameters.env }}-rg'
  #       kubernetesCluster: 'cp-${{ parameters.env }}-aks'
  #       command: 'upgrade'
  #       chartType: 'FilePath'
  #       chartPath: 'deploy/backend/templates'
  #       releaseName: 'cartonet'
  #       overrideValues: 'image.tag=${{ parameters.imagetag }}'
  #       valueFile: 'deploy/backend/environments/values-${{ parameters.env }}.yaml'
  #       arguments: '--debug --timeout 20m0s'
  # - job: Stop_VM_Job
  #   dependsOn: CD_Job
  #   pool:
  #     vmImage: ubuntu-latest
  #   steps:
  #   - checkout: none
  #   - task: AzureCLI@1
  #     displayName: 'Stop VM'
  #     inputs:
  #       azureSubscription: 'CloudPillar ${{ parameters.env }}'
  #       scriptLocation: inlineScript
  #       inlineScript: |
  #         az vm deallocate -g cp-ms-${{ parameters.env }}-rg -n aks-${{ parameters.env }}-vm