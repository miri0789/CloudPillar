# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- $(Build.SourceBranch)

variables:
- group: arm-vg
- group: iac-backend-vg
- group: backend-secrets-vg
- name: agentPool
  value: 'IoT-Dicom-Pool'
- name: aksAgentName
  value: 'iot-dicom-aks-agent'
- name: acrName
  value: 'iotimageacr'
- name: acrUrl 
  value: 'iotimageacr.azurecr.io'
- name: blobstreamer_image
  value: 'backend_blobstreamer.dll'
- name: iotlistener_image
  value: 'backend_iotlistener.dll'

stages:

- stage: Blob_Streamer
  displayName: Build, Scan & Push Blob Streamer
  jobs:

  - job: Blob_Streamer_Image
    displayName: Build Blob Streamer Image
    pool:
      name: $(agentPool)
      agent.name: $(aksAgentName) 
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    

    - task: Bash@3
      displayName: Build Blob Streamer Image
      inputs:
        targetType: inline
        script: |
          az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
          echo "Azure Login Successfull"        
          export TOKEN=$(az acr login --name $acrName --expose-token --output tsv --query accessToken)
          echo "Token: $TOKEN"
          # export TOKEN=$(az acr login --name $acrName --expose-token --output tsv --query accessToken)
          # export loginServer=$(az acr login --name $acrName --expose-token --output tsv --query loginServer)
          # docker login $loginServer --username 00000000-0000-0000-0000-000000000000 --password $TOKEN
          # docker build -t $(acrName).azurecr.io/$(blobstreamer_image) --build-arg DLL=$(blobstreamer_image) -f ./src/backend/infra/build/Dockerfile ./src/backend/blobstreamer/
    # - task: Bash@3
    #   displayName: Scan Blob Streamer Image
    #   inputs:
    #     targetType: inline
    #     script: |
    #       docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL $(acrName).azurecr.io/$(blobstreamer_image):latest
    - task: Bash@3
      displayName: Push Blob Streamer Image
      inputs:
        targetType: inline
        script: |
          docker push $(acrName).azurecr.io/$(blobstreamer_image):latest




- stage: IoT_Listener_Image
  displayName: Build, Scan & Push IoT Listener
  jobs:

  - job: BlobStreamer_Image
    displayName: Build Blob Streamer Image
    pool:
      name: $(agentPool)
      agent.name: $(aksAgentName) 
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    
    - task: Bash@3
      displayName: Build IoT Listener Image
      inputs:
        targetType: inline
        script: |
          az login --service-principal -u $(iac-app-client-id) -p $(iac-app-client-secret) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
          echo "Azure Login Successfull"                
          export TOKEN=$(az acr login --name $acrName --expose-token --output tsv --query accessToken)
          export loginServer=$(az acr login --name $acrName --expose-token --output tsv --query loginServer)
          docker login $loginServer --username 00000000-0000-0000-0000-000000000000 --password $TOKEN        
          docker build -t $(acrName).azurecr.io/$(iotlistener_image) --build-arg DLL=$(iotlistener_image) -f ./src/backend/infra/build/Dockerfile ./src/backend/iotlistener/
    # - task: Bash@3
    #   displayName: Scan IoT Listener Image
    #   inputs:
    #     targetType: inline
    #     script: |
    #       docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL $(acrName).azurecr.io/$(iotlistener_image):latest
    - task: Bash@3
      displayName: Push IoT Listener Image
      inputs:
        targetType: inline
        script: |
          docker push $(acrName).azurecr.io/$(iotlistener_image):latest
